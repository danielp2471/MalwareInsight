import matplotlib.pyplot as plt

# REGISTRY OPERATIONS BARCHART
def plot_registry_operations(event_counts):
    # Extract the keys (event types) and their counts
    events = list(event_counts.keys())
    counts = list(event_counts.values())
    
    # Create a bar chart
    plt.figure(figsize=(10,6))
    plt.barh(events, counts, color='skyblue')
    plt.xlabel('Count')
    plt.ylabel('Registry Operation')
    plt.title('Registry Operations Count')
    plt.gca().invert_yaxis()  # This will show the event with the highest count on top
    plt.tight_layout()
    
    # Save the chart as an image
    registry_operations_image_path = r'reports\registry_operations.png'
    plt.savefig(registry_operations_image_path)
    # Optionally display the chart
    #plt.show()
    plt.close()

    return registry_operations_image_path

# REGISTRY OPERATIONS PIE CHART

def plot_registry_operations_pie(event_counts):
    # Extract the keys (event types) and their counts
    events = list(event_counts.keys())
    counts = list(event_counts.values())
    total = sum(counts)

    # Calculate percentages
    percentages = [(count/total)*100 for count in counts]
    
    # Create labels for the legend which include the operation and percentage
    labels_with_percentages = [f'{event} ({percentage:.2f}%)' for event, percentage in zip(events, percentages)]
    
    # Create a pie chart
    fig, ax = plt.subplots(figsize=(10,6))
    wedges = ax.pie(counts, startangle=90, colors=plt.cm.Paired.colors, wedgeprops=dict(width=0.4))

    # Draw a circle at the center of pie to make it look like a donut
    centre_circle = plt.Circle((0,0),0.70,fc='white')
    fig.gca().add_artist(centre_circle)

    # Set the title
    ax.set_title('Registry Operations Distribution')
    
    # Position the labels outside of the pie using legend
    ax.legend(wedges[0], labels_with_percentages, title="Registry Operations", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))
    
    # Save the chart as an image
    registry_operations_pie = r'reports\registry_pie.png'
    plt.savefig(registry_operations_pie, bbox_inches='tight')  # bbox_inches='tight' to fit the legend in the saved image
    # Optionally display the chart
    #plt.show()
    plt.close()

    return registry_operations_pie

# PROCESS BARCHART

def plot_processes_created(process_counts):
    # Extract the processes and their counts
    processes = list(process_counts.keys())
    counts = list(process_counts.values())
    
    # Create a bar chart
    plt.figure(figsize=(10,6))
    plt.barh(processes, counts, color='skyblue')
    plt.xlabel('Count')
    plt.ylabel('Process Created')
    plt.title('Processes Created Count')
    plt.gca().invert_yaxis()  # This will show the process with the highest count on top
    plt.tight_layout()
    
    # Save the chart as an image
    processes_created_image_path = r'reports\processes_created.png'
    plt.savefig(processes_created_image_path)
    # Optionally display the chart
    #plt.show()
    plt.close()

    return processes_created_image_path

# FILES BARCHART

def plot_files_created(event_counts):
    # Extract the keys (event types) and their counts
    events = list(event_counts.keys())
    counts = list(event_counts.values())
    
    # Create a bar chart
    plt.figure(figsize=(10,6))
    plt.barh(events, counts, color='skyblue')
    plt.xlabel('Count')
    plt.ylabel('File Operation')
    plt.title('Files Created Count')
    plt.gca().invert_yaxis()  # This will show the event with the highest count on top
    plt.tight_layout()
    
    # Save the chart as an image
    files_created_image_path = r'reports\files_created.png'
    plt.savefig(files_created_image_path)
    # Optionally display the chart
    #plt.show()
    plt.close()

    return files_created_image_path


