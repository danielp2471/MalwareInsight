import matplotlib.pyplot as plt
import sys
import os
import matplotlib.patches as patches

# Define section names and corresponding colors
sections = ["Malicious", "Suspicious", "Not Malicious", "Harmless"]
colors = ["red", "orange", "green", "purple"]

# Function to highlight a specific section
def highlight_section(section_to_highlight, save_path=None):
    # Create a figure and axis
    fig, ax = plt.subplots(figsize=(4, 4))

    # Loop through sections and create rectangles
    for i, section in enumerate(sections):
        if section == section_to_highlight:
            # Highlight the selected section with its corresponding color
            color = colors[i]
        else:
            # Dim other sections to gray
            color = 'gray'

        # Create a rectangle for the section
        ax.add_patch(patches.Rectangle((0, i), 1, 1, edgecolor='black', linewidth=2, facecolor=color))

        # Add section labels
        ax.text(1.1, i + 0.5, section, va='center', fontsize=12)

    # Set axis limits to crop whitespace
    ax.set_xlim(0, 1)
    ax.set_ylim(0, len(sections))

    reports_folder = "reports"

    # Save the figure as a PNG file
    # Get the directory of the script
    script_dir = os.path.dirname(os.path.abspath(__file__))

    # Specify the save path including the 'reports' folder
    if save_path is None:
        save_path = os.path.join(script_dir, reports_folder)

    # Ensure the 'reports' folder exists
    os.makedirs(save_path, exist_ok=True)
    
    # Save the figure as a PNG file with 'tight' bbox_inches
    plt.axis('off')  # Turn off the figure frame

    # Save the figure as a PNG file inside the 'reports' folder
    plt.savefig(os.path.join(save_path, 'malicious_graph.png'), format='png', bbox_inches='tight', pad_inches=0)

# Check if an argument is provided
if len(sys.argv) != 2:
    print("Usage: python script.py <classification>")
else:
    classification = sys.argv[1]
    highlight_section(classification)
