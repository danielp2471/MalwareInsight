"""
    Group 40 - Malware Sandbox
        Swinburne University of Technology
        Name: pcap_graph 
        Author: Daniel Pesavento, Chew Xin Rong Sunanda, Lachlan Stanbrook

"""





import pyshark
import collections
import matplotlib.pyplot as plt
import os
from tkinter import filedialog
from tkinter import Tk
import subprocess

# Automatically find the .pcap file in the 'reports' folder
reports_folder = "reports"
pcap_file_path = None
for filename in os.listdir(reports_folder):
    if filename.endswith(".pcap"):
        pcap_file_path = os.path.join(reports_folder, filename)
        break

if not pcap_file_path:
    print("No .pcap file found in the 'reports' folder. Exiting.")
    exit()

fixed_pcap_file_path = "fixed.pcap"
try:
    # Run editcap to fix the cut short .pcap file
    subprocess.run(["C:\Program Files\Wireshark\editcap.exe", "-F", "pcap", pcap_file_path, fixed_pcap_file_path], check=True)
except subprocess.CalledProcessError as e:
    print(f"Error fixing the .pcap file: {e}")
    exit()

cap = pyshark.FileCapture(fixed_pcap_file_path)
protocolList = []
try:
    for packet in cap:
        protocol = packet.highest_layer if hasattr(packet, "highest_layer") else "Unknown"
        protocolList.append(protocol)
except Exception as e:
    print(f"Error reading packets from the .pcap file: {e}")
    exit()

cap.close()

counter = collections.Counter(protocolList)

# Extract the protocol names and frequencies
protocols = list(counter.keys())
frequencies = list(counter.values())

# Colours that will be used, trying to maintain distinguishable colours.
colors = ['#FF0000',  # Red
          '#00FF00',  # Green
          '#0000FF',  # Blue
          '#FFFF00',  # Yellow
          '#FF00FF',  # Magenta
          '#00FFFF',  # Cyan
          '#FFA500',  # Orange
          '#800080',  # Purple
          '#A52A2A',  # Brown
          '#808080',  # Gray
          '#2E8B57',  # Sea Green
          ]

# setting explode parameters, for the slices to be more distinguishable, since there are so many.
explode = [0.05] * len(protocols)

# Generate the pie chart
plt.figure(figsize=(10, 7)) 
wedges, texts = plt.pie(frequencies, explode=explode, colors=colors, startangle=140) #adding shadows to make slices more evident.

# Calculate percentages and append to the protocol names for the legend
percentages = [f"{(freq / sum(frequencies)) * 100:.1f}%" for freq in frequencies]
legend_labels = [f"{protocol} - {percentage}" for protocol, percentage in zip(protocols, percentages)]

# Add the legend to the right
plt.legend(wedges, legend_labels, title="Protocols", bbox_to_anchor=(1, 0.5), loc="center right", fontsize=10, 
           bbox_transform=plt.gcf().transFigure)

plt.axis('equal')  #ensures that pie is drawn as a circle

# ensure the pie is drawn as a circle and the legend does not overlap with the chart
plt.tight_layout()

filename = "ProtocolPieChart.png"

# Get the directory of the selected .pcap file
save_dir = os.path.dirname(pcap_file_path)

try:
    plt.savefig(os.path.join(save_dir, filename))
    print("Pie chart is generated in the same directory as the .pcap file.")
    print("File saved at:", os.path.join(save_dir, filename))
except IOError as e:
    print(f"Error saving the pie chart: {e}")

# Delete the fixed .pcap file
os.remove(fixed_pcap_file_path)
