"""
    Group 40 - Malware Sandbox
        Swinburne University of Technology
        Name: MalwareInsight Report Generation script
        Author: Daniel Pesavento, Ahmed Elmi
        Date: 6/10/2023

        
        Description:
        This script provides a visual representation of the create process and write process operations, found in the .csv logs pulled from the analyzed .zip file that
        the MalwareInsight Analysis software culminates.
"""
import csv
import os
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('TkAgg')
from collections import defaultdict

def plot_operations_count(input_file):
    # Initialize dictionaries to store counts for CreateFile and WriteFile operations
    create_file_counts = defaultdict(int)
    write_file_counts = defaultdict(int)

    with open(input_file, 'r', newline='', encoding='utf-8') as csv_file:
        reader = csv.reader(csv_file)
        headers = next(reader)  # Read the header row

        # Dynamically identify the "Process Name" and "Operation" columns
        process_name_index = None
        operation_index = None
        for i, header in enumerate(headers):
            if "Process Name" in header:
                process_name_index = i
            elif "Operation" in header:
                operation_index = i

        if process_name_index is None or operation_index is None:
            print("Error: 'Process Name' or 'Operation' column not found in the CSV file.")
            return

        for row in reader:
            operation = row[operation_index].strip()
            process_name = row[process_name_index].strip()

            if operation == "Process Create":
                create_file_counts[process_name] += 1
            elif operation == "Process Start":
                write_file_counts[process_name] += 1

    # Extract the unique process names
    all_process_names = list(create_file_counts.keys()) + list(write_file_counts.keys())
    unique_process_names = list(set(all_process_names))  # Convert set to a list

    # Initialize a dictionary to store the final counts
    final_write_file_counts = {name: write_file_counts.get(name, 0) for name in unique_process_names}

    # Create two bar charts, one for CreateFile and one for WriteFile
    plt.figure(figsize=(12, 6))

    # Bar chart for CreateFile
    plt.subplot(1, 2, 1)
    plt.bar(unique_process_names, [create_file_counts[name] for name in unique_process_names], color='skyblue')
    plt.xlabel('Process Name')
    plt.ylabel('Frequency')
    plt.title('CreateFile Operation Count')
    plt.xticks(rotation=90)
    plt.grid(axis='y', alpha=0.75)

    # Bar chart for WriteFile
    plt.subplot(1, 2, 2)
    plt.bar(unique_process_names, [final_write_file_counts[name] for name in unique_process_names], color='lightcoral')
    plt.xlabel('Process Name')
    plt.ylabel('Frequency')
    plt.title('WriteFile Operation Count')
    plt.xticks(rotation=90)
    plt.grid(axis='y', alpha=0.75)

    plt.tight_layout()

    # Save the charts as images
    create_file_image_path = r'reports\create_file_operation_histogram.png'
    write_file_image_path = r'reports\write_file_operation_histogram.png'

    plt.savefig(create_file_image_path)
    plt.savefig(write_file_image_path)
    plt.close()

    return create_file_image_path, write_file_image_path
