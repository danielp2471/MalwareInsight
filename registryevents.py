import subprocess
import time
from procmon_parser import load_configuration, dump_configuration, Rule


procmon_path = r'.\ProcessMonitor\procmon.exe'
output_file = r'.\output.PML'
report_file = r'.\report.csv'
original_filter_file = r'.\ProcmonConfiguration.pmc'


def create_modified_filter_file(original_file, process_name):
    modified_file = original_file.replace('.pmc', '_modified.pmc')

    # Load the original PMC file
    with open(original_file, 'rb') as f:
        config = load_configuration(f.read())

    # Create a new list of filter rules with only your own rules
    filter_rules = [
        Rule('Process_Name', 'is', process_name),
        Rule('Operation', 'contains', 'Reg', 'include')
    ]

    # Update the filter rules in the configuration
    config['FilterRules'] = filter_rules

    # Dump the modified configuration to the new PMC file
    with open(modified_file, 'wb') as f:
        dump_configuration(config, f)

    return modified_file


# Ask the user for the process name
process_name = input("Enter the name of the process to monitor: ")

# Create the modified filter file
modified_filter_file = create_modified_filter_file(original_filter_file, process_name)

# Start Process Monitor with the modified PMC file and backing file
subprocess.Popen([procmon_path, '/Minimized', '/LoadConfig', modified_filter_file, '/Backingfile', output_file])

# Terminate Process Monitor
# Wait for the user to enter 'Q' or 'q' to finish monitoring
while True:
    user_input = input("Press 'Q' to finish monitoring: ").lower()
    if user_input == 'q':
        break
    time.sleep(1)

subprocess.Popen([procmon_path, '/Terminate'])
time.sleep(10)

# Generate report using Procmon's built-in functionality with the filter applied
subprocess.Popen([procmon_path, '/OpenLog', output_file, '/SaveAs', report_file, '/SaveApplyFilter', '/Quiet'])

print("Report generated successfully.")
