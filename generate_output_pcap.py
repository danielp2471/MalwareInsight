"""
 Group 40 - Malware Sandbox
 Swinburne University of Technology
 Name: MalwareInsight CSV parser
 Author: chew xin rong sunanda
 Date: 15/09/2023###
"""
import pyshark
import pandas as pd
import os
import subprocess

reports_folder = "reports"
pcap_file_path = None
for filename in os.listdir(reports_folder):
    if filename.endswith(".pcap"):
        pcap_file_path = os.path.join(reports_folder, filename)
        break

if not pcap_file_path:
    print("No .pcap file found in the 'reports' folder. Exiting.")
    exit()
    

def read_pcap_to_csv(pcap_file_path):
    # Check if the file exists
    if not os.path.exists(pcap_file_path):
        print("File does not exist")
        return
    
    fixed_pcap_file_path = "fixed.pcap"
    try:
        # Run editcap to fix the cut short .pcap file
        subprocess.run(["C:\Program Files\Wireshark\editcap.exe", "-F", "pcap", pcap_file_path, fixed_pcap_file_path], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error fixing the .pcap file: {e}")
        exit()

    # Read the pcap file using pyshark
    cap = pyshark.FileCapture(fixed_pcap_file_path, keep_packets=False)  # Added keep_packets=False for memory management
    
    # Initialize an empty list to store packet data
    packet_data = []
    
    # Loop through each packet in the capture file
    for packet in cap:
        try:
            timestamp = packet.sniff_time
            packet_length = packet.length
            src_ip = packet.ip.src
            dst_ip = packet.ip.dst
            protocol = packet.transport_layer
        except AttributeError:
            # Skip the packet if it doesn't contain the expected attributes
            continue

        # Create a dictionary with the packet data and append it to the list
        packet_dict = {
            'Timestamp': timestamp,
            'Packet Length': packet_length,
            'Source IP': src_ip,
            'Destination IP': dst_ip,
            'Protocol': protocol
        }
        packet_data.append(packet_dict)
    
    # Create a Pandas DataFrame from the list of packet data
    df = pd.DataFrame(packet_data)
    cap.close()

    # Save the DataFrame to a CSV file
    csv_filename = "PCAP_Data.csv"
    save_dir = os.path.dirname(pcap_file_path)
    csv_path = os.path.join(save_dir, csv_filename)
    
    try:
        df.to_csv(csv_path, index=False)
        print(f"PCAP data saved to CSV at: {csv_path}")
    except IOError as e:
        print(f"Error saving the data to CSV: {e}")

# Call the function to read the pcap file and save it as a CSV
read_pcap_to_csv(pcap_file_path)
