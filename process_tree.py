"""
    Group 40 - Malware Sandbox
        Swinburne University of Technology
        Name: MalwareInsight Process Tree 
        Author: Daniel Pesavento, Dejan Poznan
        Date: 6/10/2023

        
        Description:
        This tree utilizes the PID tracing found in csv_processing.py to create a hierachal, spider graph of processes that were spawned to easy visualize the
        pathways in which each process in a Malware was interacted with or created.
"""
import csv
import os
import sys
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

def process_csv(input_file, process_name):
    pids_to_monitor = set()
    rows_to_export = []

    with open(input_file, 'r', newline='', encoding='utf-8') as csv_file:
        reader = csv.reader(csv_file)
        headers = next(reader)

        process_name_index = headers.index('Process Name')
        pid_index = headers.index('PID')
        parent_pid_index = headers.index('Parent PID')
        path_index = headers.index('Path')

        for row in reader:
            current_process_name = row[process_name_index].strip()
            current_pid = row[pid_index].strip()
            current_parent_pid = row[parent_pid_index].strip()
            current_path = row[path_index].strip()

            if current_process_name == process_name or process_name in current_path:
                pids_to_monitor.add(current_pid)
                rows_to_export.append(row)

            if current_pid in pids_to_monitor or current_parent_pid in pids_to_monitor:
                pids_to_monitor.add(current_pid)
                rows_to_export.append(row)

    # Read the CSV file into a DataFrame
    df = pd.DataFrame(rows_to_export, columns=headers)

    # Create a dictionary to store the process tree
    G = nx.DiGraph()

    # Iterate through rows and build the process tree
    for index, row in df.iterrows():
        pid = row['PID']
        process_name = row['Process Name']
        parent_pid = row['Parent PID']

        if process_name.strip():  # Check if process name is not empty
            G.add_node(pid, label=process_name)  # Add nodes with 'label' attribute

        if not pd.isna(parent_pid) and parent_pid.strip():
            G.add_edge(parent_pid, pid)  # Add edges if parent_pid is not empty

    # Extract weakly connected components as process_trees
    process_trees = list(nx.weakly_connected_components(G))

    # Function to visualize a process tree using Matplotlib
    def visualize_process_tree(tree_index):
        subgraph = G.subgraph(process_trees[tree_index])

        # Create a layout for the nodes
        pos = nx.spring_layout(subgraph, seed=42)

        # Draw nodes and labels
        nx.draw(subgraph, pos, with_labels=True, labels=nx.get_node_attributes(subgraph, 'label'))
        plt.title(f"Process Tree {tree_index + 1}")

        # Save the figure to a file
        reports_folder = ".\Reports"
        script_dir = os.path.dirname(os.path.abspath(__file__))
        save_path = os.path.join(script_dir, reports_folder)
        plt.savefig(os.path.join(save_path, 'process_tree.png'), format='png')

    # Print associated PIDs and process names and visualize each process tree
    for i, tree_nodes in enumerate(process_trees):
        labels = nx.get_node_attributes(G, 'label')  # Retrieve labels here
        for node in tree_nodes:
            process_name = labels.get(node, 'N/A')  # Use .get() to handle missing labels


        # Visualize the process tree using Matplotlib
        visualize_process_tree(i)

if __name__ == "__main__":
    if len(sys.argv) != 2 :
        print("Usage: python script_name.py input_file.csv")
        sys.exit(1)
    input_file = sys.argv[1]
    # Read the process_name from the CSV file
    with open(input_file, 'r', newline='', encoding='utf-8') as csv_file:
        reader = csv.reader(csv_file)
        next(reader)  # Skip the header row
        row = next(reader)  # Read the second row
        process_name = row[1].strip()  # Get the value from the second column
    process_csv(input_file, process_name)
