<#
	Group 40 - Malware Sandbox
	Swinburne University of Technology
	Name: MalwareInsight host client
	Author: Daniel Pesavento
	Date: 19/08/2023
	Dependencies: 
		- OpenSSH Client on Host Machine (native to Windows)
		- OpenSSH Server on Sandbox
		- Wireshark/Tshark/Editcap (all 3 are included as part of Wireshark installation)
		
	Description:
	Powershell script designed to greatly assist in setting up and fully manage a Malware Analysis
	sandbox using Oracle VirtualBox, designed to be used in conjunction with MalwareInsight's analysis scripts. 
	An brief synopsis of each menu function includes:
	1. Setting up a sandbox environment
		- Takes copies of the base line snapshot
		- This copy will be used for Malware Analysis
	2. Secures VM by removing guest additions such as copy/paste, drag and drop and network adapters.
	   Proceeds to then start the MalwareInsight prepared snapshot, utilizing a host-only adaper for network security.
	3. Shut Down VM shuts the specified running virtual machine down, cleans up any created snapshots and restores
	   base line specified snapshot for re-use for further analysis sessions.
	4. Transfer File allows the user to use the SCP protocol from host-only to the VM. This allows for the safe transfer
	   any file that utilizes .zip/.rar/.7zip.
	     - Can be used to transfer an encrypted Malware File
		 - Can be used to transfer necessary tools utilized by the MalwareInsight Analysis program(s), such as Process Monitor or FakeNet.
		 - Overall, any tool/file that user wishes to be present after securement can be transferred as long as it is compressed.
	5. Retrieve Reports moves the compressed results generated by the MalwareInsight Analysis tool onto the host machine, compressed.
	6. Create Reports uncompresses the results retrieved from the Sandbox, and filters them into 2 readable, dynamically filter reports.
	   (Technical and Non-Technical respectively).
	
#>

function welcomeStart{
	
	Write-Host "
  __  __       _                             
 |  \/  |     | |                            
 | \  / | __ _| |_      ____ _ _ __ ___      
 | |\/| |/ _` | \ \ /\ / / _` | '__/ _ \     
 | |  | | (_| | |\ V  V / (_| | | |  __/     
 |_|  |_|\__,_|_| \_/\_/ \__,_|_|  \___|     
           _____           _       _     _   
          |_   _|         (_)     | |   | |  
            | |  _ __  ___ _  __ _| |__ | |_ 
            | | | '_ \/ __| |/ _` | '_ \| __|
           _| |_| | | \__ \ | (_| | | | | |_ 
          |_____|_| |_|___/_|\__, |_| |_|\__|
                              __/ |          
                             |___/           
	
	" -ForegroundColor Green
	Write-Host "Group 40 - Malware Sandbox Swinburne University of Technology"
	Write-Host ""
	Write-Host "This program requires information regarding your virtual machine to run successfully."
	$validChoices = @('M', 'C')
    while ($true) {
        $choice = Read-Host "Enter 'M' to enter values manually, or 'C' to load an existing configuration file"
        
        if ($validChoices -contains $choice.ToUpper()) {
            break  # Exit the loop if the input is valid
        } else {
            Write-Host "Invalid choice. Please enter 'M' or 'C'." -ForegroundColor Green -BackgroundColor Black
        }
    }
	$newSnapshotName = "MalwareInsight Snapshot"
	Set-Variable -Name "newSnapshotName" -Value $newSnapshotName -Scope Global
	
	if ($choice.ToUpper() -eq 'M') {
		# Manually enter values
		vBoxPathSet
		$vmName = Read-Host "Enter vmName"
		Set-Variable -Name "vmName" -Value $vmName -Scope Global
		$sourceSnapshotName = Read-Host "Enter sourceSnapshotName"
		Set-Variable -Name "sourceSnapshotName" -Value $sourceSnapshotName -Scope Global
		$username = Read-Host "Enter username"
		Set-Variable -Name "username" -Value $username -Scope Global
		$newSnapshotName = "MalwareInsight Snapshot"
		Set-Variable -Name "newSnapshotName" -Value $newSnapshotName -Scope Global


		# Save values to a configuration file
		$config = @{
			"vbox_path" = $vboxManagePath
			"vm_name" = $vmName
			"source_snapshot_name" = $sourceSnapshotName
			"username" = $username
		} | ConvertTo-Json -Depth 1 | Out-File "config.json" -Force
		Write-Host "File saved as config.json. You can use this to load details next time you launch." -ForegroundColor Green -BackgroundColor Black
		Read-Host "Values set succesfully. Proceeding to menu..."
		$selection
	}
	elseif ($choice.ToUpper() -eq 'C') {
		# Use values from the configuration file
		$config = Get-Content "config.json" | ConvertFrom-Json
		$vboxManagePath = $config.vbox_path
		Set-Variable -Name "vboxManagePath" -Value $vboxManagePath -Scope Global
		$vmName = $config.vm_name
		Set-Variable -Name "vmName" -Value $vmName -Scope Global
		$sourceSnapshotName = $config.source_snapshot_name
		Set-Variable -Name "sourceSnapshotName" -Value $sourceSnapshotName -Scope Global
		$username = $config.username
		Set-Variable -Name "username" -Value $username -Scope Global
		Read-Host "Values set succesfully. Proceeding to menu..."
		$selection
	}
	else {
		Write-Host "Invalid choice. Exiting script." -ForegroundColor Red -BackgroundColor Black
		Exit
	}
}


# Function to check if tshark (Wireshark) is installed and prompt to download if not
$global:tsharkPath = $null

function CheckWireshark {
    $tsharkExe = Get-Command tshark.exe -ErrorAction SilentlyContinue
    if ($tsharkExe) {
        Write-Host "Wireshark (tshark) is installed."
        $global:tsharkPath = $tsharkExe.Source
    } else {
        $commonPaths = @(
            "C:\Program Files\Wireshark\tshark.exe",
            "C:\Program Files (x86)\Wireshark\tshark.exe",
            "C:\Wireshark\tshark.exe"
        )

        $found = $false
        foreach ($path in $commonPaths) {
            if (Test-Path $path) {
                $found = $true
                $global:tsharkPath = $path
                break
            }
        }

        if ($found) {
            Write-Host "Wireshark (tshark) is installed for .pcap analysis."
        } else {
            Write-Host "Wireshark (tshark) could not be found."
            Write-Host "Please find the location of tshark.exe"

            # Prompt the user to select the folder where tshark.exe is installed
            $folderDialog = New-Object -ComObject Shell.Application
            $selectedFolder = $folderDialog.BrowseForFolder(0, "Select the folder where tshark.exe is installed", 0, "C:\")
            if ($selectedFolder -ne $null) {
                $global:tsharkPath = Join-Path $selectedFolder.Self.Path "tshark.exe"
            }
        }
    }
}



# Main function
function dependencyCheck {
    Write-Host "Checking installed/working applications..."
    CheckWireshark
}


# Function to display the menu and get user input
function Show-Menu {
    Clear-Host
	Write-Host "
  __  __       _                             
 |  \/  |     | |                            
 | \  / | __ _| |_      ____ _ _ __ ___      
 | |\/| |/ _` | \ \ /\ / / _` | '__/ _ \     
 | |  | | (_| | |\ V  V / (_| | | |  __/     
 |_|  |_|\__,_|_| \_/\_/ \__,_|_|  \___|     
           _____           _       _     _   
          |_   _|         (_)     | |   | |  
            | |  _ __  ___ _  __ _| |__ | |_ 
            | | | '_ \/ __| |/ _` | '_ \| __|
           _| |_| | | \__ \ | (_| | | | | |_ 
          |_____|_| |_|___/_|\__, |_| |_|\__|
                              __/ |          
                             |___/           
	
	" -ForegroundColor Green
    Write-Host "Welcome to MalwareInsight!"
    Write-Host "1. Set-Up Sandbox environment"
    Write-Host "2. Start VM"
	Write-Host "3. Shut down VM"
	Write-Host "4. Transfer File"
	Write-Host "5. Retrieve Reports"
	Write-Host "6. Create Reports"
    Write-Host "Q. Quit"
    Write-Host ""
    $selection = Read-Host "Please select an option"
    return $selection
}


# Function to check if VBoxManage.exe is accessible
function CheckVBoxManage {
    if (Test-Path -Path $vBoxManagePath -PathType Leaf) {
        return $true
    }
    else {
        return $false
    }
}

# Function to handle the "First-time user?" option
function vBoxPathSet {
    $defaultPath = "C:\Program Files\Oracle\VirtualBox\VBoxManage.exe"
    $vBoxManagePath = ""

    while ($true) {
        $useDefault = Read-Host "Do you want to use the default path for VBoxManage? ($defaultPath) (Y/N)"

        if ($useDefault -eq "Y" -or $useDefault -eq "y") {
            $vBoxManagePath = $defaultPath 
			Set-Variable -Name "vboxManagePath" -Value $vboxManagePath -Scope Global
            break  # Exit the loop when 'Y' or 'y' is entered
        }
        elseif ($useDefault -eq "N" -or $useDefault -eq "n") {
            $vBoxManagePath = Read-Host "Please enter the path to VBoxManage executable"
            if (CheckVBoxManage) {
                Set-Variable -Name "vBoxManagePath" -Value $vBoxManagePath -Scope Global # Update variable name here as well
                Write-Host "VBoxManage executable found at '$vBoxManagePath'." -ForegroundColor Green
                break  # Exit the loop when a valid path is provided
            }
            else {
                Write-Host "VBoxManage executable not found at '$vBoxManagePath'. Please make sure the path is correct." -ForegroundColor Red
                Read-Host "Press Enter to continue"
            }
        }
        else {
            Write-Host "Invalid input. Please enter 'Y' or 'N'." -ForegroundColor Red
        }
    }
    Read-Host "Press Enter to continue"
}


# Function to handle the "Start VM" option
function SetupVM {
    Clear-Host
    Write-Host "Starting VM..." -ForegroundColor Yellow

    if (CheckVBoxManage) {
		# Start the virtual machine with the original snapshot
		Write-Host "Starting base-line snapshot of virtual machine..." -ForegroundColor Yellow
		Write-Host "MalwareInsight will take a copy that can be used for Malware Analysis securely." -ForegroundColor Yellow
		Start-Process -FilePath $vBoxManagePath -ArgumentList "startvm `"$vmName`" --type gui --snapshot `"$sourceSnapshotName`"" -Wait
		
		# Take a new snapshot from the original state
		Start-Process -FilePath $vBoxManagePath -ArgumentList "snapshot `"$vmName`" take `"$newSnapshotName`"" -Wait
		Write-Host "New snapshot '$newSnapshotName' created from the original snapshot." -ForegroundColor Yellow
		# Power off the virtual machine
		Start-Process -FilePath $vBoxManagePath -ArgumentList "controlvm `"$vmName`" poweroff" -Wait
		# Wait for the virtual machine to be powered off

		# Restore the new snapshot and launch the virtual machine
		Start-Process -FilePath $vBoxManagePath -ArgumentList "snapshot `"$vmName`" restore `"$newSnapshotName`" --live" -Wait
		Write-Host "New snapshot '$newSnapshotName' restored. Checking validity..." -ForegroundColor Yellow
		Start-Process -FilePath $vBoxManagePath -ArgumentList "startvm `"$vmName`" --type gui" -Wait
		Clear-Host
		Write-Host "Malware Sandbox set-up complete. Please review the following:" -ForegroundColor Yellow
		Write-Host "" 
		Write-Host "Virtual Machine Name: $vmName" -ForegroundColor Yellow
		Write-Host "Base-line Snapshot: $sourceSnapshotName" -ForegroundColor Yellow
		Write-Host "MalwareInsight will use this snapshot as the base point once analysis is complete and ready for re-use" -ForegroundColor Yellow
		Write-Host "Snapshot for Malware Analysis: $newSnapshotName" -ForegroundColor Yellow
		Write-Host
		Write-Host "If these settings are incorrect, feel free to go through the Set-Up once more." -ForegroundColor Yellow
		Read-Host "Press Enter to continue"
		Clear-Host
		Write-Host "Turning off restored snapshot. Start Sandbox when ready to begin analysis." -ForegroundColor Yellow
		Start-Process -FilePath $vBoxManagePath -ArgumentList "controlvm `"$vmName`" poweroff" -Wait
		SecureVM
		Write-Host "Sandbox Setup Complete!" -ForegroundColor Yellow
		Read-Host "Press Enter to continue"
    }
	else {
        Write-Host "VBoxManage executable not found. Please ensure it is installed and the path is set." -ForegroundColor Red
    }
}

# Function to handle security implementations for the virtual machine
function SecureVM {
    Clear-Host
    # Disable copy and paste
    Write-Host "Disabling copy and paste..." -ForegroundColor Yellow
    Start-Process -FilePath $vBoxManagePath -ArgumentList "modifyvm", "$vmName", "--clipboard", "disabled"
    Start-Sleep -Seconds 2
    # Disable drag and drop
    Write-Host "Disabling drag and drop..." -ForegroundColor Yellow
    Start-Process -FilePath $vBoxManagePath -ArgumentList "modifyvm", "$vmName", "--draganddrop", "disabled"
    Start-Sleep -Seconds 2
    Write-Host "Disabling network adapters..." -ForegroundColor Yellow
    # Network adapter removal
    for ($i = 1; $i -le 8; $i++) {
        Start-Process -FilePath $vBoxManagePath -ArgumentList "modifyvm", "$vmName", "--nic$i", "none" -NoNewWindow -Wait
    }
    # Set the host-only adapter for nic1
    Write-Host "Setting the host-only adapter for nic1..." -ForegroundColor Yellow
	$hostOnlyAdapterName = "VirtualBox Host-Only Ethernet Adapter"
	Start-Process -FilePath $vBoxManagePath -ArgumentList "modifyvm", "$vmName", "--nic1", "hostonly", "--hostonlyadapter1", "`"$hostOnlyAdapterName`"" -NoNewWindow -Wait
    Write-Host "Host-only adapter set up to disable external network access from the sandbox." -ForegroundColor Yellow
    Write-Host "Security measures have been applied to the Malware Sandbox" -ForegroundColor Green
}

# Function to check if 'MalwareInsight Snapshot' exists
function CheckSnapshotExistence {
    $snapshotList = & $vBoxManagePath snapshot $vmName list --machinereadable
    $snapshotExists = $snapshotList -match 'name="MalwareInsight Snapshot"'
    return $snapshotExists
}


# Function to handle the "Start VM" option
function StartVM {
    Clear-Host
	if (CheckSnapshotExistence) {
    Write-Host "Starting $vmName" -ForegroundColor Yellow
    Write-Host "Ensure you have gone through the MalwareInsight setup before continuing any further." -ForegroundColor Yellow
    Write-Host "MalwareInsight is not liable for any damage caused to your system." -ForegroundColor Yellow
    Write-Host "Always ensure your host machine has a working anti-virus and the latest patches!" -ForegroundColor Yellow
    $answer = Read-Host "Agree to proceed? Y/N"
	if ($answer -eq "Y" -or $answer -eq "y") {
    Write-Host "Starting sandbox..." -ForegroundColor Green
            Start-Process -FilePath $vBoxManagePath -ArgumentList "startvm `"$vmName`" --type gui" -Wait
            Clear-Host
            Write-Host "Sandbox created! Happy Analyzing!" -ForegroundColor Green
            Write-Host "When analysis is complete, please use 'Retrieve Reports' to grab your logs." -ForegroundColor Green
            Write-Host "You can then securely shut down and clean the Sandbox using 'Shut Down VM' via the menu." -ForegroundColor Green
        }
	else {
			selection = Show-Menu
		}
	} 
    else {
        Write-Host "The 'MalwareInsight Snapshot' does not exist. Please go through the 'Set-Up Sandbox environment' first." -ForegroundColor Red
		$setupAgain = Read-Host "Do you want to run 'Set-Up Sandbox environment'? (Y/N)"
            if ($setupAgain -eq "Y" -or $setupAgain -eq "y") {
                SetupVM
            } else {
                Write-Host "Returning to the main menu."
				Read-Host "Press Enter to Continue..."
            }
	}
    
}


# Function to handle the "Shutdown Virtual Machine" option
function ShutdownVM {
    Clear-Host

	# Check if vBoxManagePath is null or empty and prompt user for input
	if ([string]::IsNullOrWhiteSpace($vBoxManagePath)) {
		$defaultPath = "C:\Program Files\Oracle\VirtualBox\VBoxManage.exe"
		$useDefault = Read-Host "Do you want to use the default path for VBoxManage? (Y/N)" -ForegroundColor Yellow
		$vboxManagePath = ""

		if ($useDefault -eq "Y" -or $useDefault -eq "y") {
			$vboxManagePath = $defaultPath
		}
		else {
			$vboxManagePath = Read-Host "Please enter the path to VBoxManage executable" -ForegroundColor Yellow
		}
	}

	while ([string]::IsNullOrWhiteSpace($vmName) -or [string]::IsNullOrWhiteSpace($sourceSnapshotName) -or [string]::IsNullOrWhiteSpace($newSnapshotName)) {
		Write-Host "One or more values are missing. Please enter the values manually." -ForegroundColor Red
		
		if ([string]::IsNullOrWhiteSpace($vmName)) {
			$vmName = Read-Host "Please enter the name of the VM" -ForegroundColor Yellow
		}
		
		if ([string]::IsNullOrWhiteSpace($sourceSnapshotName)) {
			$sourceSnapshotName = Read-Host "Please enter the name of the source snapshot" -ForegroundColor Yellow
		}
		
		if ([string]::IsNullOrWhiteSpace($newSnapshotName)) {
			$newSnapshotName = Read-Host "Please enter the name of the new snapshot" -ForegroundColor Yellow
		}
	}

	# Power off the virtual machine
	Start-Process -FilePath $vBoxManagePath -ArgumentList "controlvm `"$vmName`" poweroff" -Wait
	Write-Host "Virtual machine '$vmName' is shut down." -ForegroundColor Green

	
	# Restore the source snapshot
	Start-Process -FilePath $vBoxManagePath -ArgumentList "snapshot `"$vmName`" restore `"$sourceSnapshotName`"" -Wait
	Write-Host "Restored the source snapshot '$sourceSnapshotName' for virtual machine '$vmName'." -ForegroundColor Green

	# Delete the new snapshot
	Start-Process -FilePath $vBoxManagePath -ArgumentList "snapshot `"$vmName`" delete `"$newSnapshotName`"" -Wait
	Write-Host "Deleted the new snapshot '$newSnapshotName' for virtual machine '$vmName'." -ForegroundColor Green


	Read-Host "Press Enter to continue"

}


function Test-SSHCommand {
    param (
        [string]$CommandName
    )
    
    $commandPath = Get-Command $CommandName -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source
    
    return [bool]($commandPath -ne $null)
}

function Transfer-File {
    Add-Type -AssemblyName System.Windows.Forms
	$errorLogFile = "scp_error.log"

    if (Test-Path -Path $errorLogFile) {
        # Clear the contents of scp_error.log if it exists
        Clear-Content -Path $errorLogFile
    }
	
	if ($global:ip -eq $null) {
        $ip = Read-Host "Enter IP of Sandbox:"
    }
	else {
		Write-Host "IP: $ip"
		while ($true) {
			$ip_query = Read-Host "Use currently saved IP (Y/N) or enter manually?"
			if ($ip_query -eq "Y" -or $ip_query -eq "y") {
				# Use the currently saved IP
				break  # Exit the loop when 'Y' or 'y' is entered
			} elseif ($ip_query -eq "N" -or $ip_query -eq "n") {
				$ip = Read-Host "Enter IP of Sandbox:"
				$global:ip = $ip  # Save the entered IP as a global variable
				break  # Exit the loop when 'N' or 'n' is entered
			} else {
				Write-Host "Invalid choice. Please enter 'Y' or 'N'." -ForegroundColor Red -BackgroundColor Black
			}
		}
	}
	

    $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
    $openFileDialog.Filter = "ZIP Files (*.zip)|*.zip|RAR Files (*.rar)|*.rar|7ZIP Files (*.7z)|*.7z"
    $openFileDialog.Title = "Select a file to transfer"
    
    # Show the file dialog and check if the user selected a file
    if ($openFileDialog.ShowDialog() -eq 'OK') {
        $filePath = (Resolve-Path -Path $openFileDialog.FileName).Path
    } else {
        Write-Host "No file selected." -ForegroundColor Red
        return
    }
    
    # Validate if the SCP command exists
    if (-not (Test-SSHCommand "scp")) {
        Write-Host "Error: SCP command not found. Please ensure that OpenSSH Client is installed, and OpenSSH server is running on your baseline VM snapshot." -ForegroundColor Red
        return
    }
    
    # Construct the destination path on the Windows machine (user's desktop)
    $destinationPath = "C:\Users\$username\Desktop"
    
    # Construct the SCP command
    $scpArguments = "`"$filePath`" ${username}@${ip}:`"$destinationPath`""
    $scpProcess = Start-Process -FilePath "scp" -ArgumentList $scpArguments -NoNewWindow -RedirectStandardError $errorLogFile -PassThru
    # Wait for the SCP process to complete
    $scpProcess.WaitForExit()
    
    # Check if scp_error.log has any entries
    $scpErrorLogContents = Get-Content -Path $errorLogFile

    if ($scpErrorLogContents -ne $null -and $scpErrorLogContents.Count -gt 0) {
        Write-Host "SCP transfer failed. Check scp_error.log for details." -ForegroundColor Red
    } else {
        Write-Host "Transfer successful." -ForegroundColor Green
		$global:ip = $ip  # Save the IP address as a global variable

    }
    
    Start-Sleep -Seconds 3
}


function Retrieve-Report {
	$errorLogFile = "scp_error.log"
	if ($global:ip -eq $null) {
        $ip = Read-Host "Enter IP of Sandbox:"
    }
	else {
		Write-Host "IP: $ip"
		while ($true) {
			$ip_query = Read-Host "Use currently saved IP (Y/N) or enter manually?"
			if ($ip_query -eq "Y" -or $ip_query -eq "y") {
				break  # Exit the loop when 'Y' or 'y' is entered
			} elseif ($ip_query -eq "N" -or $ip_query -eq "n") {
				$ip = Read-Host "Enter IP of Sandbox:"
				break  # Exit the loop when 'N' or 'n' is entered
			} else {
				Write-Host "Invalid choice. Please enter 'Y' or 'N'." -ForegroundColor Red -BackgroundColor Black
			}
		}
	}
    $useDefaultPath = Read-Host "Retrieve report.zip from Sandbox desktop at 'C:\Users\$username\Desktop\reports.zip'? (Y/N)"
    if ($useDefaultPath -eq "Y" -or $useDefaultPath -eq "y") {
        Write-Host "Using default path" -ForegroundColor Green
        $guestFilePath = "C:\Users\$username\Desktop\reports.zip"
    }
    else {
        $guestFilePath = Read-Host "Enter the exact path of the report/file you wish to retrieve from the sandbox."
        Write-Host "Using $guestFilePath as file to be retrieved" -ForegroundColor Green
    }

    # Show the folder selection dialog box and check if the user selected a folder
    $folderDialog = New-Object -ComObject Shell.Application
    $selectedFolder = $folderDialog.BrowseForFolder(0, "Select Destination Folder", 0, "C:\Users\")
    Set-Variable -Name "$selectedFolder" -Value $selectedFolder -Scope Global
    if ($selectedFolder -eq $null) {
        Write-Host "No folder selected."
        return
    }

    # Get the selected folder path
    $destinationPath = $selectedFolder.Self.Path
	Set-Variable -Name "$destinationPath" -Value $destinationPath -Scope Global
    $scriptDirectory = $PSScriptRoot
    $reportsPath = Join-Path -Path $scriptDirectory -ChildPath "reports"

    # Construct the SCP command
    $scpArguments = "${username}@${ip}:${guestFilePath} `"$destinationPath\reports.zip`""
    $errorLogFile = "$scriptDirectory\scp_error.log"
    $scpProcess = Start-Process -FilePath "scp" -ArgumentList $scpArguments -NoNewWindow -RedirectStandardError $errorLogFile -PassThru

    # Wait for the SCP process to complete
    $scpProcess.WaitForExit()
	 # Check if scp_error.log has any entries
    $scpErrorLogContents = Get-Content -Path $errorLogFile

    if ($scpErrorLogContents -ne $null -and $scpErrorLogContents.Count -gt 0) {
        Write-Host "SCP transfer failed. Check scp_error.log for details." -ForegroundColor Red
    } else {
        Write-Host "Transfer successful." -ForegroundColor Green
		$global:ip = $ip  # Save the IP address as a global variable

    }
	Read-Host "Press Enter to continue..."
}




function createReports {
	Clear-Host
	$validChoices = @('Y', 'N', 'n', 'y')

    Write-Host "Producing technical and non-technical report." -ForegroundColor Green
    # Ask the user if they want a VirusTotal rating
	Write-Host "Do you want a VirusTotal rating for the sample file?" -ForegroundColor Green
	while ($true) {
		$virusTotalRating = Read-Host "Threat Rating will not be present on the resulting reports if not submitted (Y/N): "
        
        if ($validChoices -contains $virusTotalRating.ToUpper()) {
            break  # Exit the loop if the input is valid
        } else {
            Write-Host "Invalid choice. Please enter 'Y' or 'N'." -ForegroundColor Red -BackgroundColor Black
        }
    }
    
    if ($virusTotalRating -eq "Y" -or $virusTotalRating -eq "y") {
        Write-Host "File will be uploaded to the VirusTotal API, please await until complete..." -ForegroundColor Green
        $virus_total_api = "virus_total_scan.py"
        & python $virus_total_api
        Clear-Host
        Read-Host "Sample File submitted to Virus-Total, results recorded."
        $vtotal_graph = "vtotal.py"
        & python $vtotal_graph
    }
	if ($virusTotalRating -eq "N" -or $virusTotalRating -eq "n") {
		Write-Host "Skipping Virus Total scan of sample Malware file."
	}
	Write-Host "Please select the location where the retrieved reports.zip exists."
    if ($selectedFolder -eq $null) {
		$folderDialog = New-Object -ComObject Shell.Application
		$selectedFolder = $folderDialog.BrowseForFolder(0, "Select folder where reports.zip currently exists", 0, "C:\Users\")
        $scriptDirectory = $PSScriptRoot
		$reportsPath = Join-Path -Path $scriptDirectory -ChildPath "reports"
		if ($selectedFolder -eq $null) {
			Write-Host "No folder selected." -ForegroundColor Red
			return
		}
    }
	$destinationPath = $selectedFolder.Self.Path


	
	# Check if the files already exist in the destination directory
	$csvFilePath = Join-Path -Path $reportsPath -ChildPath "monitor_report.csv"
	$txtFilePath = Join-Path -Path $reportsPath -ChildPath "fakenet_logs.txt"
	$pcapFilePath = Join-Path -Path $reportsPath -ChildPath "*.pcap"
	$existingFiles = @()
	if (Test-Path -Path $csvFilePath) {
		$existingFiles += "monitor_report.csv"
	}
	if (Test-Path -Path $txtFilePath) {
		$existingFiles += "fakenet_logs.txt"
	}
	if (Test-Path -Path $pcapFilePath) {
		$existingFiles += "*pcap"
	}


	if ($existingFiles.Count -gt 0) {
    $overwrite = ""
    
    while ($overwrite -ne "N" -and $overwrite -ne "n" -and $overwrite -ne "Y" -and $overwrite -ne "y") {
        # Prompt the user for confirmation
        $overwrite = Read-Host "The following file(s) already exist in the destination directory: $($existingFiles -join ', '). Do you want to overwrite them? (Y/N)"
        
        if ($overwrite -ne "N" -and $overwrite -ne "n" -and $overwrite -ne "Y" -and $overwrite -ne "y") {
            Write-Host "Invalid input. Please enter 'Y' or 'N'." -ForegroundColor Red
        }
    }

    if ($overwrite -eq "N" -or $overwrite -eq "n") {
        Write-Host "Files not being overwritten. Current files in the reports folder will be used." -ForegroundColor Green
        Start-Sleep -Seconds 3
        Write-Host "Creating technical report..." -ForegroundColor Yellow
        # Run the report_parser.py script
        $pythonScript = "report_parser.py"
        & python $pythonScript
        # Run the non_technical_report.py script
        Write-Host "Creating non-technical report..."
        $nonTechScript = "nontech.py"
        & python $nonTechScript
        Read-Host "Press Enter to continue..."
        return
    } else {
        # Delete the existing files
        $existingFiles | ForEach-Object {
            $existingFile = Join-Path -Path $reportsPath -ChildPath $_
            Remove-Item -Path $existingFile -Force -ErrorAction SilentlyContinue
        }
      }
	}


    # Get the selected folder path
	# Extract the contents of the archive
	Write-Host "Extracting logs from .zip file..." -ForegroundColor Yellow
	Expand-Archive -Path $destinationPath\reports.zip -DestinationPath $reportsPath -Force

    Start-Sleep -Seconds 3
	$pcapScript = "pcap_graph.py"
	Write-Host "Creating html reports..." -ForegroundColor Yellow
	# Run the report_parser.py script
    $pythonScript = "report_parser.py"
    & python $pythonScript
	# Run the non_technical_report.py script
	#$nonTechScript = "nontech.py"
	#& python $nonTechScript
	Read-Host "Press Enter to continue..."
	
}



# Main script
Write-Host "Checking depedencies installed..." -ForegroundColor Yellow
$dependency_check = dependencyCheck
$start = welcomeStart
$selection = Show-Menu

while ($selection -ne 'q') {
    switch ($selection) {
        '1' { SetupVM }
        '2' { StartVM }
		'3' { ShutDownVM }
		'4' { Transfer-File}
		'5' { Retrieve-Report}
		'6' { createReports}
        default {
            Write-Host "Invalid option. Please try again." -ForegroundColor Red
            Read-Host "Press Enter to continue"
        }
    }

    $selection = Show-Menu
}

Write-Host "Goodbye!"
pause
