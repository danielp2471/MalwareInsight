# Function to display the menu and get user input
function Show-Menu {
    Clear-Host
    Write-Host "Welcome to MalwareInsight"
    Write-Host "1. First-time user?"
    Write-Host "2. Start VM"
    Write-Host "3. Connect to SSH"
	Write-Host "4. Shut down VM"
	Write-Host "5. Transfer File"
    Write-Host "Q. Quit"
    Write-Host ""
    $selection = Read-Host "Please select an option"
    return $selection
}


# Function to check if VBoxManage.exe is accessible
function CheckVBoxManage {
    if (Test-Path -Path $VBoxManagePath -PathType Leaf) {
        return $true
    }
    else {
        return $false
    }
}

# Function to handle the "First-time user?" option
function FirstTimeUser {
    Clear-Host
    Write-Host "Welcome, first-time user!"
    Write-Host ""

    $defaultPath = "C:\Program Files\Oracle\VirtualBox\VBoxManage.exe"
    $useDefault = Read-Host "Do you want to use the default path for VBoxManage? (Y/N)"
    $vboxManagePath = ""

    if ($useDefault -eq "Y" -or $useDefault -eq "y") {
        $vboxManagePath = $defaultPath
    }
    else {
        $vboxManagePath = Read-Host "Please enter the path to VBoxManage executable"
    }

    if (CheckVBoxManage) {
        Set-Variable -Name "VBoxManagePath" -Value $vboxManagePath -Scope Global
        Write-Host "VBoxManage executable found at '$VBoxManagePath'."
    }
    else {
        Write-Host "VBoxManage executable not found at '$VBoxManagePath'. Please make sure the path is correct."
    }

    Read-Host "Press Enter to continue"
}

# Function to disable network on active adapters except for SCP
function DisableNetworkExceptSCP {
    param (
        [Parameter(Mandatory=$true)]
        [string]$vmName
    )

    
}

# Function to handle the "Start VM" option
function StartVM {
    Clear-Host
    Write-Host "Starting VM..."

    if (CheckVBoxManage) {
        $vmName = Read-Host "Please enter the name of the VM"
        $snapshotName = Read-Host "Please enter the name of the snapshot"
		# Disable copy-pasting and drag-and-drop
		Start-Process -FilePath $VBoxManagePath -ArgumentList "modifyvm `"$vmName`" --clipboard disabled" -Wait
		Start-Process -FilePath $VBoxManagePath -ArgumentList "modifyvm `"$vmName`" --draganddrop disabled" -Wait

		# Disable all shared folders
		$sharedFolders = & $VBoxManagePath showvminfo `"$vmName`" --machinereadable | Select-String -Pattern "^SharedFolderNameMachineMapping" | ForEach-Object {
			$_.ToString().Split('=')[1].Trim('"')
		}
		foreach ($folder in $sharedFolders) {
			Start-Process -FilePath $VBoxManagePath -ArgumentList "sharedfolder remove `"$vmName`" --name `"$folder`"" -Wait
		}
		
		# Start the VM with GUI
		Start-Process -FilePath $VBoxManagePath -ArgumentList "startvm `"$vmName`" --type gui" -Wait
		Start-Sleep -Seconds 5  # Wait for VM to start

		# Restore the snapshot
		Start-Sleep -Seconds 10  # Delay before restoring the snapshot (adjust the duration as needed)
		Start-Process -FilePath $VBoxManagePath -ArgumentList "snapshot `"$vmName`" restore `"$snapshotName`" --live" -Wait
		Write-Host "VM '$vmName' has been started with the GUI, copy-pasting and drag-and-drop are disabled, shared folders are removed, network activity is disabled on all adapters, and SCP connections are allowed on all adapters. The snapshot '$snapshotName' has been restored."
    }
    else {
        Write-Host "VBoxManage executable not found. Please ensure it is accessible."
    }

    Read-Host "Press Enter to continue"
}



# Function to handle the "Connect to SSH" option
function ConnectToSSH {
    Clear-Host
    Write-Host "Connect to SSH option"

    $vmName = Read-Host "Please enter the name of the VM"

    $sshUsername = Read-Host "Please enter the SSH username"
    $sshIP = Read-Host "Please enter the SSH IP address"
    $sshPassword = Read-Host "Please enter the SSH password" -AsSecureString

    # Convert the secure string password to plain text
    $sshPasswordPlain = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($sshPassword))

    # Check if 'ssh' command is available
    $sshPath = Get-Command -Name ssh -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source

    if ([string]::IsNullOrWhiteSpace($sshPath)) {
        Write-Host "'ssh' command not found."

        $installSSH = Read-Host "Do you want to install OpenSSH? (Y/N)"
        if ($installSSH -eq "Y" -or $installSSH -eq "y") {
            # Add installation logic here
            Write-Host "OpenSSH installation steps..."
        }
        else {
            Write-Host "SSH connection cannot be established without OpenSSH."
            Read-Host "Press Enter to continue"
            return
        }
    }

    # Attempt SSH connection
    Write-Host "Attempting to connect to SSH..."
    Start-Process -FilePath $sshPath -ArgumentList "-l", $sshUsername, "-oStrictHostKeyChecking=no", "-oUserKnownHostsFile=/dev/null", "-oPasswordAuthentication=yes", "-oPubkeyAuthentication=no", "-oNumberOfPasswordPrompts=1", "-oConnectTimeout=30", $sshIP

    Write-Host "SSH connection has been established."

    Read-Host "Press Enter to continue"
}

# Function to handle the "Shutdown Virtual Machine" option
function ShutdownVM {
    Clear-Host
    Write-Host "Shutdown Virtual Machine option"

    $vmName = Read-Host "Please enter the name of the VM"

    # Stop the VM
    Start-Process -FilePath $VBoxManagePath -ArgumentList "controlvm `"$vmName`" poweroff"

    Read-Host "Press Enter to continue"
}


function Test-SSHCommand {
    param (
        [string]$CommandName
    )
    
    $commandPath = Get-Command $CommandName -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source
    
    return [bool]($commandPath -ne $null)
}

function Transfer-File {
    Add-Type -AssemblyName System.Windows.Forms
    
    $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
    $openFileDialog.Filter = "ZIP Files (*.zip)|*.zip|RAR Files (*.rar)|*.rar|7ZIP Files (*.7z)|*.7z"
    $openFileDialog.Title = "Select a file to transfer"
    
    # Show the file dialog and check if the user selected a file
    if ($openFileDialog.ShowDialog() -eq 'OK') {
        $filePath = (Resolve-Path -Path $openFileDialog.FileName).Path
    } else {
        Write-Host "No file selected."
        return
    }
    
    $username = Read-Host "Enter the SSH username:"
    $ip = Read-Host "Enter the IP of the Virtual Machine:"
    
    # Validate if the SCP command exists
    if (-not (Test-SSHCommand "scp")) {
        Write-Host "Error: SCP command not found. Please ensure that OpenSSH is installed."
        return
    }
    
    # Construct the destination path on the Windows machine (user's desktop)
    $destinationPath = "C:\Users\$username\Desktop"
    
    # Construct the SCP command
    $scpArguments = "`"$filePath`" ${username}@${ip}:`"$destinationPath`""
    $errorLogFile = "scp_error.log"
    $scpProcess = Start-Process -FilePath "scp" -ArgumentList $scpArguments -NoNewWindow -RedirectStandardError $errorLogFile -PassThru
    
    # Wait for the SCP process to complete
    $scpProcess.WaitForExit()
    
    # Check the exit code of the SCP process
    if ($scpProcess.ExitCode -eq 0) {
        Write-Host "File transferred successfully!"
    } else {
        Write-Host "File transfer failed. Check the error log for details: $errorLogFile"
    }
    
    Start-Sleep -Seconds 3
}

# Main script
$selection = Show-Menu

while ($selection -ne 'q') {
    switch ($selection) {
        '1' { FirstTimeUser }
        '2' { StartVM }
        '3' { ConnectToSSH }
		'4' { ShutDownVM }
		'5' { Transfer-File}
        default {
            Write-Host "Invalid option. Please try again."
            Read-Host "Press Enter to continue"
        }
    }

    $selection = Show-Menu
}

Write-Host "Goodbye!"
pause
