<#
	Group 40 - Malware Sandbox
	Swinburne University of Technology
	Name: MalwareInsight host client
	Author: Daniel Pesavento
	Date: 7/07/2023
	Dependencies: 
		- OpenSSH Client on Host Machine (native to Windows)
		- OpenSSH Server on Sandbox
		
	Description:
	Powershell script designed to greatly assist in setting up and fully manage a Malware Analysis
	sandbox using Oracle VirtualBox, designed to be used in conjunction with MalwareInsight's analysis scripts. 
	An brief synopsis of each menu function includes:
	1. Setting up a sandbox environment
		- Takes copies of the base line snapshot
		- This copy will be used for Malware Analysis
	2. Secures VM by removing guest additions such as copy/paste, drag and drop and network adapters.
	   Proceeds to then start the MalwareInsight prepared snapshot, utilizing a host-only adaper for network security.
	3. Shut Down VM shuts the specified running virtual machine down, cleans up any created snapshots and restores
	   base line specified snapshot for re-use for further analysis sessions.
	4. Transfer File allows the user to use the SCP protocol from host-only to the VM. This allows for the safe transfer
	   any file that utilizes .zip/.rar/.7zip.
	     - Can be used to transfer an encrypted Malware File
		 - Can be used to transfer necessary tools utilized by the MalwareInsight Analysis program(s), such as Process Monitor or FakeNet.
		 - Overall, any tool/file that user wishes to be present after securement can be transferred as long as it is compressed.
	5. Retrieve Reports moves the compressed results generated by the MalwareInsight Analysis tool onto the host machine, compressed.
	6. Create Reports uncompresses the results retrieved from the Sandbox, and filters them into 2 readable, dynamically filter reports.
	   (Technical and Non-Technical respectively).
	
#>

function welcomeStart{
	
	Write-Host "
  __  __       _                             
 |  \/  |     | |                            
 | \  / | __ _| |_      ____ _ _ __ ___      
 | |\/| |/ _` | \ \ /\ / / _` | '__/ _ \     
 | |  | | (_| | |\ V  V / (_| | | |  __/     
 |_|  |_|\__,_|_| \_/\_/ \__,_|_|  \___|     
           _____           _       _     _   
          |_   _|         (_)     | |   | |  
            | |  _ __  ___ _  __ _| |__ | |_ 
            | | | '_ \/ __| |/ _` | '_ \| __|
           _| |_| | | \__ \ | (_| | | | | |_ 
          |_____|_| |_|___/_|\__, |_| |_|\__|
                              __/ |          
                             |___/           
	
	"
	Write-Host "Group 40 - Malware Sandbox Swinburne University of Technology"
	Write-Host ""
	Write-Host "This program requires information regarding your virtual machine to run successfully."
	$choice = Read-Host "Enter 'M' to enter values manually, or 'C' to load an existing configuration file"
	$newSnapshotName = "MalwareInsight Snapshot"
	Set-Variable -Name "newSnapshotName" -Value $newSnapshotName -Scope Global
	if ($choice.ToUpper() -eq 'M') {
		# Manually enter values
		vBoxPathSet
		$vmName = Read-Host "Enter vmName"
		Set-Variable -Name "vmName" -Value $vmName -Scope Global
		$sourceSnapshotName = Read-Host "Enter sourceSnapshotName"
		Set-Variable -Name "sourceSnapshotName" -Value $sourceSnapshotName -Scope Global
		$ip = Read-Host "Enter IP"
		Set-Variable -Name "ip" -Value $ip -Scope Global
		$username = Read-Host "Enter username"
		Set-Variable -Name "username" -Value $username -Scope Global
		$newSnapshotName = "MalwareInsight Snapshot"
		Set-Variable -Name "newSnapshotName" -Value $newSnapshotName -Scope Global


		# Save values to a configuration file
		$config = @{
			"vbox_path" = $vboxManagePath
			"vm_name" = $vmName
			"source_snapshot_name" = $sourceSnapshotName
			"ip" = $ip
			"username" = $username
		} | ConvertTo-Json -Depth 1 | Out-File "config.json" -Force
		Write-Host "File saved as config.json. You can use this to load details next time you launch."
		Read-Host "Values set succesfully. Proceeding to menu..."
		$selection
	}
	elseif ($choice.ToUpper() -eq 'C') {
		# Use values from the configuration file
		$config = Get-Content "config.json" | ConvertFrom-Json
		$vboxManagePath = $config.vbox_path
		Set-Variable -Name "vboxManagePath" -Value $vboxManagePath -Scope Global
		$vmName = $config.vm_name
		Set-Variable -Name "vmName" -Value $vmName -Scope Global
		$sourceSnapshotName = $config.source_snapshot_name
		Set-Variable -Name "sourceSnapshotName" -Value $sourceSnapshotName -Scope Global
		$ip = $config.ip
		Set-Variable -Name "ip" -Value $ip -Scope Global
		$username = $config.username
		Set-Variable -Name "username" -Value $username -Scope Global
		Read-Host "Values set succesfully. Proceeding to menu..."
		$selection
	}
	else {
		Write-Host "Invalid choice. Exiting script."
		Exit
	}
}

# Function to display the menu and get user input
function Show-Menu {
    Clear-Host
	Write-Host "
  __  __       _                             
 |  \/  |     | |                            
 | \  / | __ _| |_      ____ _ _ __ ___      
 | |\/| |/ _` | \ \ /\ / / _` | '__/ _ \     
 | |  | | (_| | |\ V  V / (_| | | |  __/     
 |_|  |_|\__,_|_| \_/\_/ \__,_|_|  \___|     
           _____           _       _     _   
          |_   _|         (_)     | |   | |  
            | |  _ __  ___ _  __ _| |__ | |_ 
            | | | '_ \/ __| |/ _` | '_ \| __|
           _| |_| | | \__ \ | (_| | | | | |_ 
          |_____|_| |_|___/_|\__, |_| |_|\__|
                              __/ |          
                             |___/           
	
	"
    Write-Host "Welcome to MalwareInsight!"
    Write-Host "1. Set-Up Sandbox environment"
    Write-Host "2. Start VM"
	Write-Host "3. Shut down VM"
	Write-Host "4. Transfer File"
	Write-Host "5. Retrieve Reports"
	Write-Host "6. Create Reports"
    Write-Host "Q. Quit"
    Write-Host ""
    $selection = Read-Host "Please select an option"
    return $selection
}


# Function to check if VBoxManage.exe is accessible
function CheckVBoxManage {
    if (Test-Path -Path $VBoxManagePath -PathType Leaf) {
        return $true
    }
    else {
        return $false
    }
}

# Function to handle the "First-time user?" option
function vBoxPathSet {
    $defaultPath = "C:\Program Files\Oracle\VirtualBox\VBoxManage.exe"
    $useDefault = Read-Host "Do you want to use the default path for VBoxManage? 
				 ($defaultPath) (Y/N)"
    $vboxManagePath = ""

    if ($useDefault -eq "Y" -or $useDefault -eq "y") {
        $vboxManagePath = $defaultPath
    }
    else {
        $vboxManagePath = Read-Host "Please enter the path to VBoxManage executable"
    }

    if (CheckVBoxManage) {
        Set-Variable -Name "VBoxManagePath" -Value $vboxManagePath -Scope Global
        Write-Host "VBoxManage executable found at '$VBoxManagePath'."
    }
    else {
        Write-Host "VBoxManage executable not found at '$VBoxManagePath'. Please make sure the path is correct."
		Read-Host "Press Enter to continue"
		$welcomeStart
	}
    Read-Host "Press Enter to continue"
	
}


# Function to handle the "Start VM" option
function SetupVM {
    Clear-Host
    Write-Host "Starting VM..."

    if (CheckVBoxManage) {
		# Start the virtual machine with the original snapshot
		Write-Host "Starting base-line snapshot of virtual machine..."
		Write-Host "MalwareInsight will take a copy that can be used for Malware Analysis securely."
		Start-Process -FilePath $VBoxManagePath -ArgumentList "startvm `"$vmName`" --type gui --snapshot `"$sourceSnapshotName`"" -Wait
		
		# Take a new snapshot from the original state
		Start-Process -FilePath $VBoxManagePath -ArgumentList "snapshot `"$vmName`" take `"$newSnapshotName`"" -Wait
		Write-Host "New snapshot '$newSnapshotName' created from the original snapshot."
		# Power off the virtual machine
		Start-Process -FilePath $VBoxManagePath -ArgumentList "controlvm `"$vmName`" poweroff" -Wait
		# Wait for the virtual machine to be powered off

		# Restore the new snapshot and launch the virtual machine
		Start-Process -FilePath $VBoxManagePath -ArgumentList "snapshot `"$vmName`" restore `"$newSnapshotName`" --live" -Wait
		Write-Host "New snapshot '$newSnapshotName' restored. Checking validity..."
		Start-Process -FilePath $VBoxManagePath -ArgumentList "startvm `"$vmName`" --type gui" -Wait
		Clear-Host
		Write-Host "Malware Sandbox set-up complete. Please review the following:"
		Write-Host ""
		Write-Host "Virtual Machine Name: $vmName"
		Write-Host "Base-line Snapshot: $sourceSnapshotName"
		Write-Host "MalwareInsight will use this snapshot as the base point once analysis is complete and ready for re-use"
		Write-Host "Snapshot for Malware Analysis: $newSnapshotName"
		Write-Host
		Write-Host "If these settings are incorrect, feel free to go through the Set-Up once more."
		Read-Host "Press Enter to continue"
		Clear-Host
		Write-Host "Turning off restored snapshot. Start Sandbox when ready to begin analysis."
		Start-Process -FilePath $VBoxManagePath -ArgumentList "controlvm `"$vmName`" poweroff" -Wait
		SecureVM
		Write-Host "Sandbox Setup Complete!"
		Read-Host "Press Enter to continue"
    }
	else {
        Write-Host "VBoxManage executable not found. Please ensure it is accessible."
    }
}

# Function to handle security implementations for the virtual machine
function SecureVM {
    Clear-Host
    # Disable copy and paste
    Write-Host "Disabling copy and paste..."
    Start-Process -FilePath $VBoxManagePath -ArgumentList "modifyvm", "$vmName", "--clipboard", "disabled"
    Start-Sleep -Seconds 2
    # Disable drag and drop
    Write-Host "Disabling drag and drop..."
    Start-Process -FilePath $VBoxManagePath -ArgumentList "modifyvm", "$vmName", "--draganddrop", "disabled"
    Start-Sleep -Seconds 2
    Write-Host "Disabling network adapters..."
    # Network adapter removal
    for ($i = 1; $i -le 8; $i++) {
        Start-Process -FilePath $VBoxManagePath -ArgumentList "modifyvm", "$vmName", "--nic$i", "none" -NoNewWindow -Wait
    }
    # Set the host-only adapter for nic1
    Write-Host "Setting the host-only adapter for nic1..."
	$hostOnlyAdapterName = "VirtualBox Host-Only Ethernet Adapter"
	Start-Process -FilePath $VBoxManagePath -ArgumentList "modifyvm", "$vmName", "--nic1", "hostonly", "--hostonlyadapter1", "`"$hostOnlyAdapterName`"" -NoNewWindow -Wait
    Write-Host "Host-only adapter set up to disable external network access from the sandbox."
    Write-Host "Security measures have been applied to the Malware Sandbox"
}


function StartVM{
		Clear-Host
		Write-Host "Starting $vmName" 
		Write-Host "Ensure you have gone through the MalwareInsight setup before continuing any further."
		Write-Host "MalwareInsight is not liable for any damage caused to your system."
		Write-Host "Always ensure your host machine has a working anti-virus and latest patches!"
		$answer = Read-Host "Agree to proceed? Y/N"
		if ($answer -eq "Y" -or $answer -eq "y") {
			Write-Host "Starting sandbox..."
			Start-Process -FilePath $VBoxManagePath -ArgumentList "startvm `"$vmName`" --type gui" -Wait
			Clear-Host
			Write-Host "Sandbox created! Happy Analyzing!"
			Write-Host "When analysis is complete, please use 'Retrieve Reports' to grab your logs."
			Write-Host "You can then securely shut down and clean the Sandbox using 'Shut Down VM' via the menu."
		}
		else {
			Write-Host "Returning to main menu."
			$selection
		}


}

# Function to handle the "Shutdown Virtual Machine" option
function ShutdownVM {
    Clear-Host

	# Check if VBoxManagePath is null or empty and prompt user for input
	if ([string]::IsNullOrWhiteSpace($VBoxManagePath)) {
		$defaultPath = "C:\Program Files\Oracle\VirtualBox\VBoxManage.exe"
		$useDefault = Read-Host "Do you want to use the default path for VBoxManage? (Y/N)"
		$vboxManagePath = ""

		if ($useDefault -eq "Y" -or $useDefault -eq "y") {
			$vboxManagePath = $defaultPath
		}
		else {
			$vboxManagePath = Read-Host "Please enter the path to VBoxManage executable"
		}
	}

	while ([string]::IsNullOrWhiteSpace($vmName) -or [string]::IsNullOrWhiteSpace($sourceSnapshotName) -or [string]::IsNullOrWhiteSpace($newSnapshotName)) {
		Write-Host "One or more values are missing. Please enter the values manually."
		
		if ([string]::IsNullOrWhiteSpace($vmName)) {
			$vmName = Read-Host "Please enter the name of the VM"
		}
		
		if ([string]::IsNullOrWhiteSpace($sourceSnapshotName)) {
			$sourceSnapshotName = Read-Host "Please enter the name of the source snapshot"
		}
		
		if ([string]::IsNullOrWhiteSpace($newSnapshotName)) {
			$newSnapshotName = Read-Host "Please enter the name of the new snapshot"
		}
	}

	# Power off the virtual machine
	Start-Process -FilePath $VBoxManagePath -ArgumentList "controlvm `"$vmName`" poweroff" -Wait
	Write-Host "Virtual machine '$vmName' is shut down."

	
	# Restore the source snapshot
	Start-Process -FilePath $VBoxManagePath -ArgumentList "snapshot `"$vmName`" restore `"$sourceSnapshotName`"" -Wait
	Write-Host "Restored the source snapshot '$sourceSnapshotName' for virtual machine '$vmName'."

	# Delete the new snapshot
	Start-Process -FilePath $VBoxManagePath -ArgumentList "snapshot `"$vmName`" delete `"$newSnapshotName`"" -Wait
	Write-Host "Deleted the new snapshot '$newSnapshotName' for virtual machine '$vmName'."


	Read-Host "Press Enter to continue"

}


function Test-SSHCommand {
    param (
        [string]$CommandName
    )
    
    $commandPath = Get-Command $CommandName -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source
    
    return [bool]($commandPath -ne $null)
}

function Transfer-File {
    Add-Type -AssemblyName System.Windows.Forms
    
    $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
    $openFileDialog.Filter = "ZIP Files (*.zip)|*.zip|RAR Files (*.rar)|*.rar|7ZIP Files (*.7z)|*.7z"
    $openFileDialog.Title = "Select a file to transfer"
    
    # Show the file dialog and check if the user selected a file
    if ($openFileDialog.ShowDialog() -eq 'OK') {
        $filePath = (Resolve-Path -Path $openFileDialog.FileName).Path
    } else {
        Write-Host "No file selected."
        return
    }
    
    # Validate if the SCP command exists
    if (-not (Test-SSHCommand "scp")) {
        Write-Host "Error: SCP command not found. Please ensure that OpenSSH is installed."
        return
    }
    
    # Construct the destination path on the Windows machine (user's desktop)
    $destinationPath = "C:\Users\$username\Desktop"
    
    # Construct the SCP command
    $scpArguments = "`"$filePath`" ${username}@${ip}:`"$destinationPath`""
    $errorLogFile = "scp_error.log"
    $scpProcess = Start-Process -FilePath "scp" -ArgumentList $scpArguments -NoNewWindow -RedirectStandardError $errorLogFile -PassThru
    
    # Wait for the SCP process to complete
    $scpProcess.WaitForExit()
    
    # Check the exit code of the SCP process
    if ($scpProcess.ExitCode -eq 0) {
        Write-Host "File transferred successfully!"
    } else {
        Write-Host "File transfer failed. Check the error log for details: $errorLogFile"
    }
    
    Start-Sleep -Seconds 3
}

function Retrieve-Report {
    Clear-Host
    $useDefaultPath = Read-Host "Retrieve report.zip from Sandbox desktop at 'C:\Users\$username\Desktop\reports.zip'? (Y/N)"
    if ($useDefaultPath -eq "Y" -or $useDefaultPath -eq "y") {
        Write-Host "Using default path"
        $guestFilePath = "C:\Users\$username\Desktop\reports.zip"
    }
    else {
        $guestFilePath = Read-Host "Enter the exact path of the report/file you wish to retrieve from the sandbox."
        Write-Host "Using $guestFilePath as file to be retrieved"
    }

    # Show the folder selection dialog box and check if the user selected a folder
    $folderDialog = New-Object -ComObject Shell.Application
    $selectedFolder = $folderDialog.BrowseForFolder(0, "Select Destination Folder", 0, "C:\Users\")
    Set-Variable -Name "$selectedFolder" -Value $selectedFolder -Scope Global
    if ($selectedFolder -eq $null) {
        Write-Host "No folder selected."
        return
    }

    # Get the selected folder path
    $destinationPath = $selectedFolder.Self.Path]
	Set-Variable -Name "$destinationPath" -Value $destinationPath -Scope Global
    $scriptDirectory = $PSScriptRoot
    $reportsPath = Join-Path -Path $scriptDirectory -ChildPath "reports"

    # Construct the SCP command
    $scpArguments = "${username}@${ip}:${guestFilePath} `"$destinationPath\reports.zip`""
    Write-Host $scpArguments
    $errorLogFile = "$scriptDirectory\scp_error.log"
    $scpProcess = Start-Process -FilePath "scp" -ArgumentList $scpArguments -NoNewWindow -RedirectStandardError $errorLogFile -PassThru

    # Wait for the SCP process to complete
    $scpProcess.WaitForExit()
	
	# Check if the files already exist in the destination directory
	$csvFilePath = Join-Path -Path $reportsPath -ChildPath "monitor_report.csv"
	$txtFilePath = Join-Path -Path $reportsPath -ChildPath "fakenet_logs.txt"

	$existingFiles = @()
	if (Test-Path -Path $csvFilePath) {
		$existingFiles += "monitor_report.csv"
	}
	if (Test-Path -Path $txtFilePath) {
		$existingFiles += "fakenet_logs.txt"
	}

	if ($existingFiles.Count -gt 0) {
		# Prompt the user for confirmation
		$overwrite = Read-Host "The following file(s) already exist in the destination directory: $($existingFiles -join ', '). Do you want to overwrite them? (Y/N)"

		if ($overwrite -ne "Y" -and $overwrite -ne "y") {
			Write-Host "Files not overwritten. Returning to the main menu."
			return
		}

		# Delete the existing files
		$existingFiles | ForEach-Object {
			$existingFile = Join-Path -Path $reportsPath -ChildPath $_
			Remove-Item -Path $existingFile -Force -ErrorAction SilentlyContinue
		}
	}

	
}




function createReports {
	# Extract the contents of the archive
	Expand-Archive -Path $destinationPath\reports.zip -DestinationPath $reportsPath -Force

    Start-Sleep -Seconds 3
	Write-Host "Creating html reports..."
	# Run the report_parser.py script
    $pythonScript = "report_parser.py"
    & python $pythonScript
	Read-Host "Press Enter to continue..."
	
	if ($selectedFolder -eq $null) {
		Write-Host "Please select where your reports.zip file is that contains logs from your analysis."
		$openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
		$openFileDialog.Filter = "ZIP Files (*.zip)|*.zip"
		$openFileDialog.Title = "Select your reports.zip file."
	} else {
		Write-Host "Reports.zip last retrieved to $selectedFolder"
	}

}




# Main script
$start = welcomeStart
$selection = Show-Menu

while ($selection -ne 'q') {
    switch ($selection) {
        '1' { SetupVM }
        '2' { StartVM }
		'3' { ShutDownVM }
		'4' { Transfer-File}
		'5' { Retrieve-Report}
		'6' { createReports}
        default {
            Write-Host "Invalid option. Please try again."
            Read-Host "Press Enter to continue"
        }
    }

    $selection = Show-Menu
}

Write-Host "Goodbye!"
pause
