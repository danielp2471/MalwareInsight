"""
    Group 40 - Malware Sandbox
        Swinburne University of Technology
        Name: MalwareInsight Report Generation script
        Author: Daniel Pesavento
        Date: 7/07/2023

        
        Description:
        This script generates 2 HTML reports based on the received compressed log files after usage of the MalwareInsight Analysis script. 
        The generated report provides an analysis of recorded events and focuses on specific event categories. 
        Here is a breakdown of the script's functionality:
        1. The script defines categories and their respective event types. 
            - These are based on system event operations such as FileCreate, FileDelete, Load Image etc
        2. It initializes the HTML output and adds a main report header with a summary of the analyzed event categories.
        3. For each category, it reads the monitor report file and extracts events matching the event types for that category.
            - It displays a count summary and a table of operation counts for the events in that category.
            - It displays the event logs in a formatted table.
            - It adds the fakenet.exe logs to the "Network Events" section.
            - It adds JavaScript functionality for expand/collapse buttons to show/hide the content.

        Overall, this script processes the monitor report and FakeNet logs, generates an organized and interactive HTML report, and saves it to a specified file. 
        The report provides insights into different event categories and their associated details for analysis and review.
"""
import csv
import shutil
from csv_processing import process_csv
import json


def group_and_summarize_repetitive_rows(events):
    grouped_events = {}
    for event in events:
        key = (event[1], event[2], event[4], event[5])
        if key not in grouped_events:
            grouped_events[key] = []
        grouped_events[key].append(event[0])

    summarized_events = []
    for key, time_list in grouped_events.items():
        summarized_events.append((time_list[0], key[0], key[1], key[2], key[3], len(time_list)))

    return summarized_events


# Function to read JSON data from a file
def read_json_data(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)



# Function to generate HTML table from JSON data, which is the format in which the VirusTotal response is in
def generate_html_table(json_data, exclude_keys=None):
    if exclude_keys is None:
        exclude_keys = set()

    table_html = '<table>'
    for key, value in json_data.items():
        if key in exclude_keys:
            if isinstance(value, dict):
                # If the key is in exclude_keys, exclude the header but include the content.
                table_html += generate_html_table(value, exclude_keys)
        else:
            # Modify the key names as needed
            if key == "file_info":
                key = "Sample File Metadata"
            elif key == "stats":
                key = "VirusTotal Rating Counts"
            elif key == "results":
                key = "VirusTotal Anti-Virus Results"

            table_html += f'<tr><td>{key}</td>'
            if isinstance(value, dict):
                table_html += f'<td><button class="collapsible">{key}</button>'
                table_html += generate_html_table(value, exclude_keys)
                table_html += '</td>'
            else:
                table_html += f'<td>{value}</td>'
            table_html += '</tr>'
    table_html += '</table>'
    return table_html




output_html_file = r'reports\report.html'
fake_net_log_file = r'reports\fakenet_logs.txt'
input_malicious_details = r'reports\malicious_file_details.csv'
json_data_file = r'reports\virustotal_results.txt'

json_data = read_json_data(json_data_file)

# Read the contents of the malicious_file_details.csv
malicious_file_details = {}
with open(input_malicious_details, "r", newline="", encoding="utf-8") as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        malicious_file_details = row

sample_name = malicious_file_details['Sample Name']
# Specify the input file and chosen process name
csv_to_edit = r'.\reports\monitor_report.csv'
input_csv_file = r'.\reports\monitor_report_edited.csv'

# Call the process_csv function
process_csv(csv_to_edit, sample_name)


# Define the categories and their respective event types
categories = {
    'Processes Created': ['Process Create', 'Process Start'],
    'Files Created': ['ReadFile', 'WriteFile', 'QueryInformationFile', 'SetInformationFile', 'SetDispositionInformationFile', 'SetRenameInformationFile', 'CreateFile', 'DeleteFile', 'Rename', 'OpenFile', 'CloseFile', 'FlushBuffersFile'],
    'Registry Operations': ['RegCreateKey', 'RegOpenKey', 'RegQueryKey', 'RegSetValue', 'RegDeleteKey', 'RegDeleteValue'],
    'DLL/Executable Loaded': ['Load Image'],
}

# Initialize the HTML output
output_html = '<html><body>'

# Add main report header
output_html += '<h1>MalwareInsight Report</h1>'
output_html += '<p>This report provides an analysis of the recorded events and demonstrates the following:</p>'
output_html += '<ul>'
output_html += '<li>Sample Data Info</li>'
output_html += '<li>Processes Created</li>'
output_html += '<li>Files Created</li>'
output_html += '<li>Registry Operations</li>'
output_html += '<li>DLL/Executable Loaded</li>'
output_html += '<li>Network Events</li>'
output_html += '</ul>'

# List of keys to exclude from the JSON data section
exclude_keys = {'meta', 'attributes', 'type', 'id', 'links', 'self', 'item', 'analysis', 'data', 'date', 'status'}

json_table_html = generate_html_table(json_data, exclude_keys)

# Generate the "Sample File details" section in HTML format
output_html += "<h2>Sample File details</h2>"
output_html += '<button class="collapsible">Expand/Collapse</button>'
output_html += '<div class="content" style="display: none;">'  # Create a div container for the expandable content
output_html += json_table_html
output_html += '</div>'  # Close the div container for the expandable content

# Define the categories and their respective event types
categories = {
    'Processes Created': ['Process Create', 'Process Start'],
    'Files Created': ['ReadFile', 'WriteFile', 'QueryInformationFile', 'SetInformationFile', 'SetDispositionInformationFile', 'SetRenameInformationFile', 'CreateFile', 'DeleteFile', 'Rename', 'OpenFile', 'CloseFile', 'FlushBuffersFile'],
    'Registry Operations': ['RegCreateKey', 'RegOpenKey', 'RegQueryKey', 'RegSetValue', 'RegDeleteKey', 'RegDeleteValue'],
    'DLL/Executable Loaded': ['Load Image'],
}

# Initialize the HTML output
output_html = '<html><body>'

# Add main report header
output_html += '<h1>MalwareInsight Report</h1>'
output_html += '<p>This report provides an analysis of the recorded events and demonstrates the following:</p>'
output_html += '<ul>'
output_html += '<li>Sample Data Info</li>'
output_html += '<li>Processes Created</li>'
output_html += '<li>Files Created</li>'
output_html += '<li>Registry Operations</li>'
output_html += '<li>DLL/Executable Loaded</li>'
output_html += '<li>Network Events</li>'
output_html += '</ul>'

# List of keys to exclude from the JSON data section
exclude_keys = {'meta', 'attributes', 'type', 'id', 'links', 'self', 'item', 'analysis', 'data', 'date', 'status'}

json_table_html = generate_html_table(json_data, exclude_keys)

# Generate the "Sample File details" section in HTML format
output_html += "<h2>Sample File details</h2>"
output_html += '<button class="collapsible">Expand/Collapse</button>'
output_html += '<div class="content" style="display: none;">'  # Create a div container for the expandable content
output_html += json_table_html
output_html += '</div>'  # Close the div container for the expandable content

# Function to add a Count column to a table
def add_count_column_to_table(table_html, count_list):
    # Insert the Count header cell
    table_html = table_html.replace('<th>Operation</th>', '<th>Operation</th><th>Count</th>')

    # Split the table rows
    rows = table_html.split('</tr>')

    # Insert the Count cell to each row
    new_rows = []
    for idx, row in enumerate(rows[:-1]):
        new_rows.append(row + f'<td>{count_list[idx]}</td>')
    new_rows.append(rows[-1])  # Append the last row

    # Join the rows back together
    return '</tr>'.join(new_rows)

# Generate the HTML output for each category
for category, event_types in categories.items():
    output_html += f'<h2>{category}</h2>'
    output_html += '<button class="collapsible">Expand/Collapse</button>'
    output_html += f'<div class="content" style="display: none;">'  # Create a div container for the expandable content

    # Read the CSV report
    with open(input_csv_file, 'r', newline='', encoding='utf-8') as input_file:
        input_reader = csv.reader(input_file)
        header_row = next(input_reader)  # Skip the header row

        # Extract and display the events for the current category
        events = []
        for row in input_reader:
            time = row[0]  # Assuming the time is in the first column
            process_name = row[1]  # Assuming the process name is in the second column
            pid = row[2]  # Assuming the PID is in the third column
            parent_pid = row[8]  # Assuming the Parent PID is in the ninth column
            operation = row[3]  # Assuming the operation is in the fourth column
            path = row[4]  # Assuming the path is in the fifth column
            if any(event_type in operation for event_type in event_types):
                events.append((time, process_name, pid, parent_pid, operation, path))

        # Display event count summary
        event_count = {event_type: 0 for event_type in event_types}
        for event in events:
            event_count[event[4]] += 1

        # Create a table for event count summary
        output_html += f'<h3>Event Count Summary</h3>'
        output_html += '<table>'
        output_html += '<tr><th>Operation</th><th>Count</th></tr>'
        for event_type, count in event_count.items():
            output_html += f'<tr><td>{event_type}</td><td>{count}</td></tr>'
        output_html += '</table>'

        summarized_events = group_and_summarize_repetitive_rows(events)

        # Create a table for detailed event logs
        output_html += f'<h3>Event Logs</h3>'
        output_html += '<table>'
        output_html += '<tr><th>Time</th><th>Process Name</th><th>PID</th><th>Operation</th><th>Location</th><th>Count</th></tr>'
        for event in summarized_events:
            output_html += f'<tr><td>{event[0]}</td><td>{event[1]}</td><td>{event[2]}</td><td>{event[3]}</td><td>{event[4]}</td><td>{event[5]}</td></tr>'
        output_html += '</table>'

    output_html += '</div>'

# Add Fakenet logs to the "Network Events" section
with open(fake_net_log_file, 'r') as f:
    fakenet_logs = f.read()

output_html += f'<h2>Network Events</h2>'
output_html += '<button class="collapsible">Expand/Collapse</button>'
output_html += f'<div class="content" style="display: none;">'
output_html += '<pre>'
output_html += f'{fakenet_logs}'
output_html += '</pre>'
output_html += '</div>'

# Add JavaScript for expand/collapse functionality
output_html += """
<style>
    .collapsible {
        background-color: #777;
        color: white;
        cursor: pointer;
        padding: 18px;
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 15px;
    }

    .content {
        padding: 0 18px;
        display: none;
        overflow: hidden;
        background-color: #f1f1f1;
    }
</style>

<script>
    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            } else {
                content.style.display = "block";
            }
        });
    }
</script>
"""
# Close the HTML tags
output_html += '</body></html>'

# Write the HTML output to a file
with open(output_html_file, 'w', encoding='utf-8') as output_file:
    output_file.write(output_html)

print("HTML report generated successfully.")


