"""
    Group 40 - Malware Sandbox
        Swinburne University of Technology
        Name: MalwareInsight Report Generation script
        Author: Daniel Pesavento, Kim Nguyen, Lachlan Stanbrook
        Date: 2/10/2023

        
        Description:
        This script generates 2 HTML reports based on the received compressed log files after usage of the MalwareInsight Analysis script. 
        The generated report provides an analysis of recorded events and focuses on specific event categories. 
        Here is a breakdown of the script's functionality:
        1. The script defines categories and their respective event types. 
            - These are based on system event operations such as FileCreate, FileDelete, Load Image etc
        2. It initializes the HTML output and adds a main report header with a summary of the analyzed event categories.
        3. For each category, it reads the monitor report file and extracts events matching the event types for that category.
            - It displays a count summary and a table of operation counts for the events in that category.
            - It displays the event logs in a formatted table.
            - It adds the fakenet.exe logs to the "Network Events" section.
            - It adds JavaScript functionality for expand/collapse buttons to show/hide the content.

        Overall, this script processes the monitor report and FakeNet logs, generates an organized and interactive HTML report, and saves it to a specified file. 
        The report provides insights into different event categories and their associated details for analysis and review.
"""
import csv
import shutil
from csv_processing import process_csv
import pcap_graph
import json
import os
import subprocess
import process_graph
import generate_output_pcap
import base64 
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
from graphs import plot_registry_operations
from graphs import plot_registry_operations_pie
from graphs import plot_processes_created
from graphs import plot_files_created
from graphs import threat_graph
from graphs import plot_process_execution_histogram
from graphs import plot_distribution_of_categories

# Function to encode an image file to base64
def encode_image_to_base64(image_path):
    with open(image_path, 'rb') as image_file:
        encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
    return encoded_image

output_html_file = r'reports\report.html'
fake_net_log_file = r'reports\fakenet_logs.txt'
input_malicious_details = r'reports\malicious_file_details.csv'
json_data_file = r'reports\virustotal_results.txt'

def group_and_summarize_repetitive_rows(events):
    grouped_events = {}
    for event in events:
        key = (event[1], event[2], event[4], event[5])
        if key not in grouped_events:
            grouped_events[key] = []
        grouped_events[key].append(event[0])

    summarized_events = []
    for key, time_list in grouped_events.items():
        summarized_events.append((time_list[0], key[0], key[1], key[2], key[3], len(time_list)))

    return summarized_events

# Check if the virustotal_results.txt file exists
virustotal_results_exist = os.path.isfile(json_data_file)

# Load JSON data if it exists
if virustotal_results_exist:
    with open(json_data_file, 'r') as json_file:
        json_data = json.load(json_file)
# Read the contents of the malicious_file_details.csv
with open(input_malicious_details, "r", newline="", encoding="utf-8") as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        malicious_file_details = row

sample_name = malicious_file_details['Sample Name']

# Specify the input file and chosen process name
csv_to_edit = r'.\reports\monitor_report.csv'
input_csv_file = r'.\reports\monitor_report_edited.csv'

# Call the process_csv function
process_csv(csv_to_edit, sample_name)
process_graph
generate_output_pcap

# Define the categories and their respective event types
categories = {
    'Processes Created': ['Process Create', 'Process Start'],
    'Files Created': ['ReadFile', 'WriteFile', 'QueryInformationFile', 'SetInformationFile', 'SetDispositionInformationFile', 'SetRenameInformationFile', 'CreateFile', 'DeleteFile', 'Rename', 'OpenFile', 'CloseFile', 'FlushBuffersFile'],
    'Registry Operations': ['RegCreateKey', 'RegOpenKey', 'RegQueryKey', 'RegSetValue', 'RegDeleteKey', 'RegDeleteValue'],
    'DLL/Executable Loaded': ['Load Image'],
}

# Initialize the HTML output
output_html = """
<!DOCTYPE html>
<html>
<head>
    <style>
    /* Reset default margin and padding */
.report-container {
    padding: 20px;
}

body {
    font-family: 'Rem', sans-serif;
    margin: 0;
    padding: 0;
}

/* Header style */
.header {
    background-color: #2C3E50;
    color: white;
    text-align: center;
    padding: 0.5rem 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}


/*Navigation
nav ul {
    list-style: none;
    display: flex;
    justify-content: center;
    background-color: #2C3E50;
    margin: 0;
    padding: 0;
}

nav ul li {
    margin: 0;
}

nav ul li a {
    display: block;
    padding: 1rem 1.5rem;
    text-align: center;
    color: white;
    text-decoration: none;
    transition: background-color 0.3s, border-radius 0.3s;
    border-radius: 8px;
}


nav ul li a:hover {
    background-color: #34495E;
    border-radius: 15px;
}
*/

.logo {
    width: 300px;
    height: auto;
    margin-right: 20px;
}

.top-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding: 5px 10px;
    height: 150px;
}

.top-left {
    display: flex;
    align-items: center;
}

.top-nav {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    align-items: center;
}

.top-nav li {
    margin-right: 20px;
}

.top-nav a {
    color: white;
    text-decoration: none;
    font-weight: bold;
    font-size: 16px;
}

.top-nav-right {
    margin-left: auto;
    /* Push the top navigation to the right */
}

.top-nav ul,
.bottom-nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    align-items: center;
}

.top-nav li,
.bottom-nav li {
    margin-right: 20px;
}

.top-nav a,
.bottom-nav a {
    color: white;
    text-decoration: none;
    font-weight: bold;
    font-size: 16px;
}

.top-nav {
    justify-content: flex-end;
}

.bottom-nav {
    background-color: #1E2B38;
    padding: 20px;
    width: 100%;
    text-align: center;
    display: flex;
    justify-content: center;
}

.bottom-nav a {
    color: white;
    text-decoration: none;
    font-weight: bold;
    font-size: 16px;
    margin: 0 20px;
    /* Add margin to separate menu items */
}

.bottom-nav a:hover {
    background-color: #34495E;
    border-radius: 15px;
}


.report-container {
    padding: 20px;
}

/* Summary section style */
.summary {
    background-color: #34495E;
    color: white;
    border-radius: 10px;
    padding: 1rem;
    margin: 1rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* Individual section style */
.section {
    background-color: #ECF0F1;
    border-radius: 10px;
    margin: 1rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

/* Section title style */
.section-title {
    background-color: #34495E;
    color: white;
    padding: 0.75rem;
    border-radius: 10px 10px 0 0;
    cursor: pointer;
}

/* Section content style */
.section-content {
    padding: 1rem;
    display: none;
}

/* Network content style */
.network-content {
    white-space: pre-wrap;
    padding: 1rem;
}

/* Collapsible button style */
.collapsible {
    width: 100%;
    background-color: #444;
    color: white;
    border: none;
    padding: 1rem;
    text-align: left;
    cursor: pointer;
    font-size: 1rem;
    border-radius: 10px;
    outline: none;
    transition: background-color 0.3s;
}

/* Active collapsible button style */
.collapsible.active {
    background-color: #333;
}

/* Expandable content style */
.content {
    padding: 1rem;
    display: none;
    background-color: #f4f4f4;
    border-radius: 0 0 10px 10px;
}

/* Table style */
table {
    border-collapse: collapse;
    width: 100%;
    margin-bottom: 1rem;
    border-radius: 10px;
}

/* Table header and cell style */
th,
td {
    padding: 0.5rem;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

/* Table header style */
th {
    background-color: #333;
    color: white;
}

/* Hover effect for table rows */
tr:hover {
    background-color: #f2f2f2;
}

/* Footer */
footer {
    background-color: #2C3E50;
    color: white;
    text-align: center;
    padding: 1rem;
    margin-top: 20px;
}
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Rem&display=swap" rel="stylesheet">

</head>

<body>
<header class="header">
    <div class="top-bar">
        <div class="top-left">
            <img src="malware.svg" alt="Logo" class="logo" >
        </div>
            <nav class="top-nav top-nav-right">
                <ul>
                    <li><a href="#contact">Contact Us</a></li>
                    <li><a id="print-button">Print Report</a></li>
                    <li><a href="#sample-report">Sample Report</a></li>
                </ul>
            </nav>
    </div>
</header>
    <nav class="bottom-nav">
        <ul>
            <li><a href="#sample-files">Sample Files</a></li>
            <li><a href="#threat-rating">Threat Rating</a></li>
            <li><a href="#process-events">Process Events</a></li>
            <li><a href="#system-events">System/File Events</a></li>
            <li><a href="#registry-events">Registry Events</a></li>
            <li><a href="#dll-events">DLL/Executable Loaded Events</a></li>
            <li><a href="#network-events">Network Events</a></li>
        </ul>
    </nav>
<div class="report-container">
"""
# Add main report header
output_html += '<h1>MalwareInsight Report</h1>'
output_html += '<p>This report provides an analysis of the recorded events and demonstrates the following:</p>'
output_html += '<ul>'
output_html += '<li>Sample Data Info</li>'
output_html += '<li>Process Events</li>'
output_html += '<li>System/File Events</li>'
output_html += '<li>Registry Events</li>'
output_html += '<li>DLL/Executable Loaded Events</li>'
output_html += '<li>Network Events</li>'
output_html += '</ul>'

# Generate the "Sample File details" section in HTML format
output_html += "<h2 id='sample-files'>Sample File details</h2>"
output_html += '<button class="collapsible">Expand/Collapse</button>'
output_html += '<div class="content" style="display: none;">'  # Create a div container for the expandable content
output_html += "<table>"
for key, value in malicious_file_details.items():
    output_html += f"<tr><td>{key}</td><td>{value}</td></tr>"
output_html += "</table>"
output_html += '</div>'  # Close the div container for the expandable content

# Generate the "AV Rating details" section in HTML format if virustotal_results.txt exists
if virustotal_results_exist:
    output_html += "<h2 id='threat-rating'>Threat Rating</h2>"
    output_html += '<button class="collapsible">Expand/Collapse</button>'
    output_html += '<div class="content" style="display: none;">'  # Create a div container for the expandable content

    # Extract necessary data
    stats = json_data["data"]["attributes"]["stats"]
    av_ratings = json_data["data"]["attributes"]["results"]

    # Calculate the total by summing up available categories
    total = sum(stats.values())

    # Calculate the percentage of maliciousness
    if "malicious" in stats:
        malicious_percent = (stats["malicious"] / total) * 100
    else:
        malicious_percent = 0
    
    # Determine the classification based on the malicious percentage
    classification = ""
    if malicious_percent < 10:
        classification = "Harmless"
    elif malicious_percent < 25:
        classification = "Not Malicious"
    elif malicious_percent < 50:
        classification = "Suspicious"
    else:
        classification = "Malicious"

    save_path_complete = threat_graph(classification)
    chart_image = plot_distribution_of_categories()

    if save_path_complete:
        # Add the generated malicious graph image to the "Threat Rating" section
        encoded_malicious_graph = encode_image_to_base64(save_path_complete)
        encoded_chart_image = encode_image_to_base64(chart_image)
        
        # Subheadings for Classification and Malicious Percentage
        classification_subheading = f"<h4><strong>Classification:</strong> {classification}</h4>\n"
        malicious_percent_subheading = f"<h4><strong>Malicious Percentage:</strong> {malicious_percent:.2f}%</h4>\n"

        output_html += """
        <!-- Add styles for the charts -->
        <style>
            .threatVisualisation {
                display: flex;             
                flex-direction: column;    
                align-items: center;       
                justify-content: center;   
                width: 100%;
            }
            .threatChart {
                display: flex;             
                justify-content: center;   
                align-items: center;       
                width: 100%;               
            }
            .threatChart img {
                width: 600px;
                height: 600px;
                object-fit: contain;
                border-radius: 4px;
                background-color: #FFFFFF;
            }
        </style>

        <div class="threatVisualisation">

            <!-- Container for buttons -->
            <div class="threatButtons-container" style="padding-bottom: 20px; display: flex; flex-direction: column; align-items: center;">
                <h2 style="font-family: 'Rem', sans-serif; margin-bottom: 15px;">Visual Representation of Threat Data</h2>
                """ + classification_subheading + malicious_percent_subheading + """
                <div style="display: flex; justify-content: center; gap: 15px;">
                    <button 
                        onclick="displayThreatGraph()" 
                        style="font-size: 16px; color: #fff; background-color: #555; cursor: pointer; transition: background-color 0.3s; padding: 10px 20px;" 
                        onmouseover="this.style.backgroundColor='#333';" 
                        onmouseout="this.style.backgroundColor='#555';">Threat Rating</button>
                    <button 
                        onclick="displayPieChartThreat()" 
                        style="font-size: 16px; color: #fff; background-color: #555; cursor: pointer; transition: background-color 0.3s; padding: 10px 20px;" 
                        onmouseover="this.style.backgroundColor='#333';" 
                        onmouseout="this.style.backgroundColor='#555';">Distribution</button>
                </div>
            </div>

            <!-- Container for Visualizations -->
            <div class="threatChart-container">
                <div id="threatGraphDisplay" class="threatChart" style="display:block; border: 5px solid #555;">
                    <img src="data:image/png;base64,{}" alt="Malicious Graph">
                </div>

                <div id="pieChartThreatDisplay" class="threatChart" style="display:none; border: 5px solid #555;">
                    <img src="data:image/png;base64,{}" alt="Distribution of Categories">
                </div>
            </div>
        </div>

        <!-- Scripts -->
        <script>
            function displayThreatGraph() {{
                document.getElementById('threatGraphDisplay').style.display = 'block';
                document.getElementById('pieChartThreatDisplay').style.display = 'none';
            }}

            function displayPieChartThreat() {{
                document.getElementById('threatGraphDisplay').style.display = 'none';
                document.getElementById('pieChartThreatDisplay').style.display = 'block';
            }}
        </script>
        """.format(encoded_malicious_graph, encoded_chart_image)

# Close the HTML content
output_html += "</table>"

    #classification_arg = str(classification)

    # Build the HTML content
    #output_html += f"<h2>File Analysis Report</h2>"
    #try:
    #    subprocess.run(["python", "threat_graph.py", classification_arg])
    #except subprocess.CalledProcessError as e:
    #    print("Error running threat_graph.py:", e)

    # Add the generated malicious graph image to the "Threat Rating" section
    #malicious_graph_image_path = r'reports\malicious_graph.png'
    #encoded_malicious_graph = encode_image_to_base64(malicious_graph_image_path)
    #output_html += '<div style="text-align: center;">'  # Center the image
    #output_html += f'<img src="data:image/png;base64,{encoded_malicious_graph}" alt="Malicious Graph">'
    #output_html += '</div>'
    #output_html += f'<div style="float: left;">'
    #output_html += f"<p><strong>Classification:</strong> {classification}</p>\n"
    #output_html += f"<p><strong>Malicious Percentage:</strong> {malicious_percent:.2f}%</p>\n"
    #output_html += f'</div>'
    # Add pie chart to the HTML content
    #av_stat_pie_chart_path = r'reports\AVStat_PieChart.png'
    #encoded_av_stat_pie_chart = encode_image_to_base64(av_stat_pie_chart_path)
    #output_html += '<div style="text-align: center;">'  # Center the image
    #output_html += f'<img src="data:image/png;base64,{encoded_av_stat_pie_chart}" alt="Protocol Distribution graph">'
    #output_html += '</div>'
output_html += '<table class="event-table" style="clear: both;">'
output_html += "<tr>\n<th>Antivirus</th>\n<th>Category</th>\n<th>Result</th>\n</tr>\n"
for av_name, av_data in av_ratings.items():
    category = av_data.get("category", "N/A")
    result = av_data.get("result", "N/A")
    output_html += f"<tr>\n<td>{av_name}</td>\n<td>{category}</td>\n<td>{result}</td>\n</tr>\n"

output_html += "</table>"
output_html += '</div>'  # Close the div container for the expandable content

# Generate the HTML output for each category
for category, event_types in categories.items():
    if category == 'Processes Created':
        output_html += f'<h2 id="process-events">Process Events</h2>'  
    if category == 'Files Created':
        output_html += f'<h2 id="system-events">File/System Events</h2>'  
    if category == 'Registry Operations':
        output_html += f'<h2 id="registry-events">Registry Events</h2>'  
    if category == 'DLL/Executable Loaded':
        output_html += f'<h2 id="dll-events">DLL Events</h2>'  
    output_html += '<button class="collapsible">Expand/Collapse</button>'
    output_html += f'<div class="content" style="display: none;">'  # Create a div container for the expandable content

    # Read the CSV report
    with open(input_csv_file, 'r', newline='', encoding='utf-8') as input_file:
        input_reader = csv.reader(input_file)
        header_row = next(input_reader)  # Skip the header row

        # Extract and display the events for the current category
        events = []
        for row in input_reader:
            time = row[0]  # Assuming the time is in the first column
            process_name = row[1]  # Assuming the process name is in the second column
            pid = row[2]  # Assuming the PID is in the third column
            parent_pid = row[8]  # Assuming the Parent PID is in the ninth column
            operation = row[3]  # Assuming the operation is in the fourth column
            path = row[4]  # Assuming the path is in the fifth column
            if any(event_type in operation for event_type in event_types):
                events.append((time, process_name, pid, parent_pid, operation, path))
                
        if category == 'Processes Created':
            unique_process_names = set([event[1] for event in events])  # Get unique process names
            output_html += '<h2>Unique Processes</h2>'
            output_html += '<table>'
            output_html += '<tr><th>Process Name</th><th>Count</th></tr>'
            
            for process_name in unique_process_names:
                count = sum(1 for event in events if event[1] == process_name)
                output_html += f'<tr><td>{process_name}</td><td>{count}</td></tr>'
            output_html += '</table>'
            event_count = {event_type: 0 for event_type in event_types}
            for event in events:
                event_count[event[4]] += 1
        # Display event count summary
        event_count = {event_type: 0 for event_type in event_types}
        for event in events:
            event_count[event[4]] += 1

        if category == 'Processes Created':
            # Here, call the function to create a bar chart for the processes created
            plot_processes_created(event_count)
            processes_created_image_path = r'reports\processes_created.png'
            encoded_processes_created_image_path = encode_image_to_base64(processes_created_image_path)
            
            #Path for Process Tree visualization
            try:
                subprocess.run(["python", "process_tree.py", input_csv_file])
            except subprocess.CalledProcessError as e:
                print("Error running process_tree.py:", e)
                
            image_path_process_tree = r'reports\process_tree.png'
            encoded_protocol_process_tree = encode_image_to_base64(image_path_process_tree)

            #Path for Unique Processes visualization
            try:
                subprocess.run(["python", "process_graph.py", input_csv_file])
            except subprocess.CalledProcessError as e:
                print("Error running process_graph.py:", e)
            
            processes_graph_write = r'reports\write_file_operation_histogram.png'
            encoded_process_written = encode_image_to_base64(processes_graph_write)

            # Construct the HTML
            output_html += f"""
                <!-- Add the styles for the charts -->
                <style>
                    .visualisation {{
                        float: right;
                        padding-top: 20px;
                        padding-bottom: 20px;
                    }}
                    .chart img {{
                        width: 1000px;
                        height: 600px;
                        object-fit: contain;
                        border-radius: 4px;
                        background-color: #FFFFFF;
                    }}
                </style>
                
                <div class="visualisation">
                
                    <!-- Container for buttons -->
                    <div class="buttons-container" style="padding-bottom: 20px; display: flex; flex-direction: column; align-items: center;">
                        <h2 style="font-family: 'Rem', sans-serif; margin-bottom: 15px;">Visual Representations of Processes Created</h2>
                        <div style="display: flex; justify-content: center; gap: 15px;">
                            <button 
                                onclick="showBarChartProcesses()" 
                                style="font-size: 16px; color: #fff; background-color: #555; cursor: pointer; transition: background-color 0.3s; padding: 10px 20px;" 
                                onmouseover="this.style.backgroundColor='#333';" 
                                onmouseout="this.style.backgroundColor='#555';">Show Bar Chart</button>
                            <button 
                                onclick="showProcessGraph()" 
                                style="font-size: 16px; color: #fff; background-color: #555; cursor: pointer; transition: background-color 0.3s; padding: 10px 20px;" 
                                onmouseover="this.style.backgroundColor='#333';" 
                                onmouseout="this.style.backgroundColor='#555';">Show Unique Processes</button>
                            <button 
                                onclick="showProcessTree()" 
                                style="font-size: 16px; color: #fff; background-color: #555; cursor: pointer; transition: background-color 0.3s; padding: 10px 20px;" 
                                onmouseover="this.style.backgroundColor='#333';" 
                                onmouseout="this.style.backgroundColor='#555';">Show Process Tree</button>
                        </div>
                    </div>

                    
                    <!-- Container for Visualizations -->
                    <div class="chart-container">
                    
                        <div id="barChartProcesses" class="chart" style="display:none; border: 5px solid #555;">
                            <img src="data:image/png;base64,{encoded_processes_created_image_path}" alt="Processes Created Bar Chart">
                        </div>
                    
                        <div id="processGraph" class="chart" style="display:block; border: 5px solid #555;">
                            <img src="data:image/png;base64,{encoded_process_written}" alt="Unique Processes">
                        </div>
                        
                        <div id="processTree" class="chart" style="display:none; border: 5px solid #555;">
                            <img src="data:image/png;base64,{encoded_protocol_process_tree}" alt="Process Tree">
                        </div>

                    </div>
                </div>


                <!-- Scripts -->
                <script>
                
                    function showBarChartProcesses() {{
                        document.getElementById('processGraph').style.display = 'none';
                        document.getElementById('processTree').style.display = 'none';
                        document.getElementById('barChartProcesses').style.display = 'block';
                    }}
                
                    function showProcessGraph() {{
                        document.getElementById('processGraph').style.display = 'block';
                        document.getElementById('processTree').style.display = 'none';
                        document.getElementById('barChartProcesses').style.display = 'none';
                    }}

                    function showProcessTree() {{
                        document.getElementById('processGraph').style.display = 'none';
                        document.getElementById('processTree').style.display = 'block';
                        document.getElementById('barChartProcesses').style.display = 'none';
                    }}
                    
                </script>
            """

        if category == 'Files Created':
            # Here, call the function to create a bar chart for the files created
            plot_files_created(event_count)
            files_created_image_path = r'reports\files_created.png'
            encoded_files_graph = encode_image_to_base64(files_created_image_path)
            # Generates a visual for files created
            output_html += f'<div style="float: right; padding-top: 20px; padding-bottom: 20px;">'
            output_html += '<h2 style="display: flex; flex-direction: column; align-items: center; font-family: sans-serif;">Visual Representation of Files Created</h2>'
            output_html += '<div id="barChartFiles" class="chart" style="display:block; border: 5px solid #555;">'
            output_html += f'<img src="data:image/png;base64,{encoded_files_graph}" alt="Files Created graph">'
            output_html += '</div>'   
            output_html += '</div>' 

        if category == 'Registry Operations':

            # Generate the visualizations
            plot_registry_operations(event_count)
            registry_operations_image_path = r'reports\registry_operations.png'
            plot_registry_operations_pie(event_count)
            registry_operations_pie = r'reports\registry_pie.png'
            encoded_regop_graph = encode_image_to_base64(registry_operations_image_path)
            encoded_regpie_graph = encode_image_to_base64(registry_operations_pie)

            # Construct the HTML
            output_html += f"""
                <!-- Add the styles for the charts -->
                <style>
                    .visualisation {{
                        float: right;
                        padding-top: 20px;
                        padding-bottom: 20px;
                    }}
                    .chart img {{
                        width: 1000px;
                        height: 600px;
                        object-fit: contain;
                        border-radius: 4px;
                        background-color: #FFFFFF;
                    }}
                </style>
                

                
                <div class="visualisation">
                
                    <!-- Container for buttons -->
                    <div class="buttons-container" style="padding-bottom: 20px; display: flex; flex-direction: column; align-items: center;">
                        <h2 style="font-family: 'Rem', sans-serif; margin-bottom: 15px;">Visual Representation of Registry Operations</h2>
                        <div style="display: flex; justify-content: center; gap: 15px;">
                            <button 
                                onclick="showBarChart()" 
                                style="font-size: 16px; color: #fff; background-color: #555; cursor: pointer; transition: background-color 0.3s; padding: 10px 20px;" 
                                onmouseover="this.style.backgroundColor='#333';" 
                                onmouseout="this.style.backgroundColor='#555';">Show Bar Chart</button>
                            <button 
                                onclick="showDonutChart()" 
                                style="font-size: 16px; color: #fff; background-color: #555; cursor: pointer; transition: background-color 0.3s; padding: 10px 20px;" 
                                onmouseover="this.style.backgroundColor='#333';" 
                                onmouseout="this.style.backgroundColor='#555';">Show Pie Chart</button>
                        </div>
                    </div>

                    
                    <!-- Container for Visualizations -->
                    <div class="chart-container">
                        <div id="barChart" class="chart" style="display:block; border: 5px solid #555;">
                            <img src="data:image/png;base64,{encoded_regop_graph}" alt="Registry Operations Bar Chart">
                        </div>
                        
                        <div id="pieChart" class="chart" style="display:none; border: 5px solid #555;">
                            <img src="data:image/png;base64,{encoded_regpie_graph}" alt="Registry Operations Pie Chart">
                        </div>
                    </div>
                </div>


                <!-- Scripts -->
                <script>
                    function showBarChart() {{  // double braces
                        document.getElementById('barChart').style.display = 'block';
                        document.getElementById('pieChart').style.display = 'none';
                    }}
                    
                    function showDonutChart() {{  // double braces
                        document.getElementById('barChart').style.display = 'none';
                        document.getElementById('pieChart').style.display = 'block';
                    }}
                </script>
            """
        # DLL / EXECUTABLE LOADED SECTION
        if category == 'DLL/Executable Loaded':
            input_file = r'reports\monitor_report_edited.csv' #setting input_csv_file variable so that it can be called for histogram creation
            # Here, call the function to create a histogram for the DLLs/executables loaded
            plot_process_execution_histogram(input_file)
            histogram_image_path = r'reports\load_image_histogram.png'
            encoded_dll_graph = encode_image_to_base64(histogram_image_path)
            # Generates a visual for DLLs/executables loaded


            output_html += f'<div style="float: right; padding-top: 20px; padding-bottom: 20px;">'
            output_html += '<h2 style="display: flex; flex-direction: column; align-items: center; font-family: sans-serif;">Visual Representation of DLL/Executable Loaded</h2>'
            output_html += '<div id="barChartDLL" class="chart" style="display:block; border: 5px solid #555;">'
            output_html += f'<img src="data:image/png;base64,{encoded_dll_graph}" alt="DLL/Executable Loaded graph">'
            output_html += '</div>'
            output_html += '</div>'

        
        # Create a table for event count summary
        output_html += f"""
        <div style="width: 30%; float: left;">
            <h2 style="font-family: 'Gill Sans', sans-serif; align-items: center;">Event Count Summary</h2>
            <table style="border: 5px solid #555;">
                <tr><th>Operation</th><th>Count</th></tr>
        """

        for event_type, count in event_count.items():
            output_html += f'<tr><td>{event_type}</td><td>{count}</td></tr>'
        output_html += '</table>'
        output_html += '</div>'  # Close the div wrapping the table

        summarized_events = group_and_summarize_repetitive_rows(events)

        # Create a table for detailed event logs with scrollable container
        output_html += '<div class="scrollable-table-container">'
        output_html += '<table class="event-table">'
        output_html += '<tr><th>Time</th><th>Process Name</th><th>PID</th><th>Operation</th><th>Location</th><th>Count</th></tr>'
        for event in summarized_events:
            output_html += f'<tr><td>{event[0]}</td><td>{event[1]}</td><td>{event[2]}</td><td>{event[3]}</td><td>{event[4]}</td><td>{event[5]}</td></tr>'
        output_html += '</table>'
        output_html += '</div>'  # Close the scrollable-table-container

        output_html += '</div>'

# Read and process Fakenet logs
with open(fake_net_log_file, 'r') as f:
    fakenet_logs = f.readlines()

# Filter out unwanted lines
filtered_logs = [line for line in fakenet_logs if "ICMP type 3 code 1" not in line and "FakeNet" not in line and "WARNING" not in line and "ICMP type 3 code 3" not in line and "ERROR" not in line and "Error" not in line and "Failed" not in line]

# Add Fakenet logs to the "Network Events" section
output_html += f'<h2 id="network-events">Network Events</h2>'
output_html += '<button class="collapsible">Expand/Collapse</button>'
output_html += f'<div class="content" style="display: none;">'
# Add the image to the right under the "Network Events" section

unique_hosts = {}

f
# Keywords to identify different types of requests
request_keywords = ['requested', 'Received A request for domain']

# Iterate through filtered_logs to extract IP/Domain information and update the dictionary
for line in filtered_logs:
    parts = line.split('[')
    protocol = parts[1].split(']')[0].strip()
    
    # Check if any of the request keywords are present in the line
    is_request = any(keyword in line for keyword in request_keywords)
    
    if is_request:
        # Extract the IP and port information if available
        if "UDP " in line:
            udp_part = line.split("UDP ")[1]
            if ":" in udp_part:
                ip = udp_part.split(":")[0]
                port = udp_part.split(":")[1].split()[0]
                unique_ip_port = f"{ip}:{port}"
                if unique_ip_port not in unique_hosts:
                    unique_hosts[unique_ip_port] = 0
                unique_hosts[unique_ip_port] += 1

        # Extract the domain information if available
        if "domain '" in line:
            domain = line.split("domain '")[1].split("'")[0]
            if domain not in unique_hosts:
                unique_hosts[domain] = 0
            unique_hosts[domain] += 1

# Generate a new table in the HTML output to display unique hosts/domains and their counts
# Add a table for the unique hosts/domains
output_html += f'<div class="unique-hosts-table-container" style="float: left;">'
output_html += '<h2>Unique Hosts/Domains</h2>'
output_html += '<table class="unique-hosts-table">'
output_html += '<tr><th>IP/Domain</th><th>Count</th></tr>'
for host, count in unique_hosts.items():
    output_html += f'<tr><td>{host}</td><td>{count}</td></tr>'
output_html += '</table>'
output_html += '</div>'

image_path = r'reports\ProtocolPieChart.png'
encoded_protocol_pie_chart = encode_image_to_base64(image_path)

# Generates a visual for the distribution of protocols
output_html += f'<div style="float: right; padding-top: 20px; padding-bottom: 20px;">'
output_html += '<h2 style="display: flex; flex-direction: column; align-items: center; font-family: sans-serif;">Distribution of Protocols</h2>'
output_html += '<h3 style="display: flex; flex-direction: column; align-items: center; font-family: sans-serif;">Used during recording Network Activity</h3>'
output_html += '<div id="pieChartProtocols" class="chart" style="display:block; border: 5px solid #555;">'
output_html += f'<img src="data:image/png;base64,{encoded_protocol_pie_chart}" alt="Protocol Distribution graph">'
output_html += '</div>'   
output_html += '</div>'

# Create a table for the event logs
output_html += '<h3>FakeNet Diverter Logs</h3>'
output_html += '<table class="event-table" style="clear: both;">'
output_html += '<tr><th>Time</th><th>Protocol</th><th>Operation</th></tr>'
for line in filtered_logs:
    parts = line.split('[')
    time = parts[0].strip()
    protocol = parts[1].split(']')[0].strip()
    operation = parts[1].split(']')[1].strip()
    output_html += f'<tr><td>{time}</td><td>{protocol}</td><td>{operation}</td></tr>'
output_html += '</table>'

# Read the CSV file and insert data into the HTML table
output_html += '<h3>PCAP Output</h3>'
with open('reports\PCAP_Data.csv', 'r') as csvfile:
    csvreader = csv.DictReader(csvfile)
    
   # Create table headers dynamically
    output_html += '<table>'
    output_html += '<tr>'
    for header in csvreader.fieldnames:
        output_html += f"<th>{header}</th>"
    output_html += "</tr>"
    
    # Insert data rows
    for row in csvreader:
        output_html += "<tr>"
        for header in csvreader.fieldnames:
            output_html += f"<td>{row[header]}</td>"
        output_html += "</tr>"
    output_html += '</table>'
output_html += '</div>'



# Add JavaScript for expand/collapse functionality
output_html += """
<script>
    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            } else {
                content.style.display = "block";
            }
        });
    }
    
document.addEventListener('DOMContentLoaded', function() {
    var printButton = document.getElementById('print-button');
    printButton.addEventListener('click', function() {
        window.print();
    });
})
</script>
"""

# Footer and Close the HTML tags 
output_html += '</div>'
output_html += '<footer class="footer"> <p>&copy; 2023 MalwareInsight. All rights reserved.</p></footer>'
output_html += '</body></html>'

# Write the HTML output to a file
with open(output_html_file, 'w', encoding='utf-8') as output_file:
    output_file.write(output_html)

print("HTML report generated successfully.")


