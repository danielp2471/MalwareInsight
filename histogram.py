"""
    Group 40 - Malware Sandbox
        Swinburne University of Technology
        Name: MalwareInsight Report Generation script
        Author: Ahmed Elmi
        Date: 19/08/2023

        
        Description:
        This script generates 2 HTML reports based on the received compressed log files after usage of the MalwareInsight Analysis script. 
        The generated report provides an analysis of recorded events and focuses on specific event categories. 
        Here is a breakdown of the script's functionality:
        1. The script defines categories and their respective event types. 
            - These are based on system event operations such as FileCreate, FileDelete, Load Image etc
        2. It initializes the HTML output and adds a main report header with a summary of the analyzed event categories.
        3. For each category, it reads the monitor report file and extracts events matching the event types for that category.
            - It displays a count summary and a table of operation counts for the events in that category.
            - It displays the event logs in a formatted table.
            - It adds the fakenet.exe logs to the "Network Events" section.
            - It adds JavaScript functionality for expand/collapse buttons to show/hide the content.

        Overall, this script processes the monitor report and FakeNet logs, generates an organized and interactive HTML report, and saves it to a specified file. 
        The report provides insights into different event categories and their associated details for analysis and review.
"""



import csv
import os
import matplotlib.pyplot as plt
from collections import defaultdict

def plot_process_execution_histogram(input_file):
    process_counts = defaultdict(int)

    with open(input_file, 'r', newline='', encoding='utf-8') as csv_file:
        reader = csv.reader(csv_file)
        headers = next(reader)  # Read the header row

        # Dynamically identify the "Process Name" and "Operation" columns
        process_name_index = None
        operation_index = None
        for i, header in enumerate(headers):
            if "Process Name" in header:
                process_name_index = i
            elif "Operation" in header:
                operation_index = i

        if process_name_index is None or operation_index is None:
            print("Error: 'Process Name' or 'Operation' column not found in the CSV file.")
            return

        for row in reader:
            operation = row[operation_index].strip()
            
            # Check if the operation is "Load Image"
            if operation == "Load Image":
                current_process_name = row[process_name_index].strip()
                process_counts[current_process_name] += 1

    # Extract the process names and their counts
    processes = list(process_counts.keys())
    counts = list(process_counts.values())

    # Create a histogram
    plt.figure(figsize=(10, 6))
    plt.bar(processes, counts, color='skyblue')
    plt.xlabel('Process Name')
    plt.ylabel('Frequency')
    plt.title('Process Execution Histogram (Load Image)')
    plt.xticks(rotation=90)
    plt.grid(axis='y', alpha=0.75)
    plt.tight_layout()

    # Save the chart as an image
    histogram_image_path = r'reports\load_image_histogram.png'
    plt.savefig(histogram_image_path)
    # Optionally display the chart
    plt.show()
    plt.close()

# Example usage:
input_file = r'reports\monitor_report_edited.csv'
plot_process_execution_histogram(input_file)
