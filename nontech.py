"""
    Group 40 - Malware Sandbox
        Swinburne University of Technology
        Name: MalwareInsight Report Generation script
        Author: Ahmed Elmi/Dejan Poznan
        Date: 28/08/2023

        
        Description:
        This script generates 2 HTML reports based on the received compressed log files after usage of the MalwareInsight Analysis script. 
        The generated report provides an analysis of recorded events and focuses on specific event categories. 
        Here is a breakdown of the script's functionality:
        1. The script defines categories and their respective event types. 
            - These are based on system event operations such as FileCreate, FileDelete, Load Image etc
        2. It initializes the HTML output and adds a main report header with a summary of the analyzed event categories.
        3. For each category, it reads the monitor report file and extracts events matching the event types for that category.
            - It displays a count summary and a table of operation counts for the events in that category.
            - It displays the event logs in a formatted table.
            - It adds the fakenet.exe logs to the "Network Events" section.
            - It adds JavaScript functionality for expand/collapse buttons to show/hide the content.

        Overall, this script processes the monitor report and FakeNet logs, generates an organized and interactive HTML report, and saves it to a specified file. 
        The report provides insights into different event categories and their associated details for analysis and review.
"""



import csv
import shutil
import json
from csv_processing import process_csv

def group_and_summarize_repetitive_rows(events):
    grouped_events = {}
    for event in events:
        key = (event[1], event[2], event[4], event[5])
        if key not in grouped_events:
            grouped_events[key] = []
        grouped_events[key].append(event[0])

    summarized_events = []
    for key, time_list in grouped_events.items():
        summarized_events.append((time_list[0], key[0], key[1], key[2], key[3], len(time_list)))

    return summarized_events


# Function to read JSON data from a file
def read_json_data(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)



# Function to generate HTML table from JSON data, which is the format in which the VirusTotal response is in
def generate_html_table(json_data, exclude_keys=None):
    if exclude_keys is None:
        exclude_keys = set()

    table_html = '<table>'
    for key, value in json_data.items():
        if key in exclude_keys:
            if isinstance(value, dict):
                # If the key is in exclude_keys, exclude the header but include the content.
                table_html += generate_html_table(value, exclude_keys)
        else:
            # Modify the key names as needed
            if key == "file_info":
                key = "Sample File Metadata"
            elif key == "stats":
                key = "VirusTotal Rating Counts"
            elif key == "results":
                key = "VirusTotal Anti-Virus Results"

            table_html += f'<tr><td>{key}</td>'
            if isinstance(value, dict):
                table_html += f'<td><button class="collapsible">{key}</button>'
                table_html += generate_html_table(value, exclude_keys)
                table_html += '</td>'
            else:
                table_html += f'<td>{value}</td>'
            table_html += '</tr>'
    table_html += '</table>'
    return table_html


# Output file path for the second report
output_html_file_2 = r'reports\report_2.html'
fake_net_log_file_2 = r'reports\fakenet_logs.txt'
# Input malicious details for the second report
input_malicious_details_2 = r'reports\malicious_file_details.csv'
json_data_file = r'reports\virustotal_results.txt' 

# Read the contents of the malicious_file_details_2.csv
malicious_file_details_2 = {}
with open(input_malicious_details_2, "r", newline="", encoding="utf-8") as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        malicious_file_details_2 = row

sample_name_2 = malicious_file_details_2['Sample Name']

# Specify the input file and chosen process name for the second report
csv_to_edit_2 = r'.\reports\monitor_report.csv'
input_csv_file_2 = r'.\reports\monitor_report_edited.csv'

# Call the process_csv function for the second report
process_csv(csv_to_edit_2, sample_name_2)

categories = {
    'Processes Created': ['Process Create', 'Process Start'],
    'Files Created': ['ReadFile', 'WriteFile','SetRenameInformationFile', 'CreateFile', 'DeleteFile', 'Rename', 'OpenFile', 'CloseFile',],
}



# Initialize the HTML output for the second report
output_html_2 = '<html><body>'

# Add main report header for the second report
output_html_2 += '<h1>Second MalwareInsight Report</h1>'
output_html_2 += '<p>This report provides an analysis of the recorded events and demonstrates the following:</p>'
output_html_2 += '<ul>'
output_html_2 += '<li><b>Processes Created:</b> This section provides details about processes initiated on the system.</li>'
output_html_2 += '<li><b>Files Created:</b> This section provides information about files that were created or manipulated.</li>'
output_html_2 += '<li><b>DLL/Executable Loaded:</b> This section covers the loading of DLLs and executables.</li>'
output_html_2 += '<li><b>Network Events:</b> This section displays network-related events.</li>'
output_html_2 += '</ul>'



# Generate the HTML output for each category
for category, event_types in categories.items():
    output_html_2 += f'<h2>{category}</h2>'
    output_html_2 += '<button class="collapsible">Expand/Collapse</button>'  # Add expand/collapse button
    output_html_2 += f'<div class="content" style="display: none;">'  # Create a div container for the expandable content

    # Read the CSV report
    with open(input_csv_file_2, 'r', newline='', encoding='utf-8') as input_file:
        input_reader = csv.reader(input_file)
        header_row = next(input_reader)  # Skip the header row

        # Extract and display the events for the current category
        events = []
        for row in input_reader:
            time = row[0]  # Assuming the time is in the first column
            process_name = row[1]  # Assuming the process name is in the second column
            pid = row[2]  # Assuming the PID is in the third column
            parent_pid = row[8]  # Assuming the Parent PID is in the ninth column
            operation = row[3]  # Assuming the operation is in the fourth column
            path = row[4]  # Assuming the path is in the fifth column
            if any(event_type in operation for event_type in event_types):
                events.append((time, process_name, pid, parent_pid, operation, path))

        # Display event count summary
        event_count = {event_type: 0 for event_type in event_types}
        for event in events:
            event_count[event[4]] += 1

        # Create a table for operation counts
        output_html_2 += '<table>'
        output_html_2 += '<tr><th>Operation</th><th>Count</th></tr>'
        for event_type, count in event_count.items():
            output_html_2 += f'<tr><td>{event_type}</td><td>{count}</td></tr>'
        output_html_2 += '</table>'

       

    output_html_2 += '</div>'



# reccomendations section 
output_html_2 += '<h2>Recommendations</h2>' 
output_html_2 += '<p> MalwareInsight reccomends admins to use these following best practices to help mitigate attacks </p>'
output_html_2 += '<ul>'
output_html_2 += '<li> Make sure passwords are strong </li>'
output_html_2 += '<li> Regularly patch and update software </li>'
output_html_2 += '<li> Install the latest ani-virus software </li>'
output_html_2 += '</ul>'
output_html_2 += """
<style>
    .collapsible {
        background-color: #777;
        color: white;
        cursor: pointer;
        padding: 18px;
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 15px;
    }

    .content {
        padding: 0 18px;
        display: none;
        overflow: hidden;
        background-color: #f1f1f1;
    }
</style>

<script>
    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            } else {
                content.style.display = "block";
            }
        });
    }
</script>
"""

# Write the second report to another HTML file
with open(output_html_file_2, 'w', encoding='utf-8') as f:
    f.write(output_html_2)