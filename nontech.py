"""
    Group 40 - Malware Sandbox
        Swinburne University of Technology
        Name: MalwareInsight Report Generation script
        Author: Daniel Pesavento, Kim Nguyen, Ahmed Elmi, Dejan Poznan
        Date: 19/08/2023

        
        Description:
        This script generates 2 HTML reports based on the received compressed log files after usage of the MalwareInsight Analysis script. 
        The generated report provides an analysis of recorded events and focuses on specific event categories. 
        Here is a breakdown of the script's functionality:
        1. The script defines categories and their respective event types. 
            - These are based on system event operations such as FileCreate, FileDelete, Load Image etc
        2. It initializes the HTML output and adds a main report header with a summary of the analyzed event categories.
        3. For each category, it reads the monitor report file and extracts events matching the event types for that category.
            - It displays a count summary and a table of operation counts for the events in that category.
            - It displays the event logs in a formatted table.
            - It adds the fakenet.exe logs to the "Network Events" section.
            - It adds JavaScript functionality for expand/collapse buttons to show/hide the content.

        Overall, this script processes the monitor report and FakeNet logs, generates an organized and interactive HTML report, and saves it to a specified file. 
        The report provides insights into different event categories and their associated details for analysis and review.
"""
import csv
import shutil
from csv_processing import process_csv
import pcap_graph
import json
import os
import subprocess
import base64  # Added base64 module


# Function to encode an image file to base64
def encode_image_to_base64(image_path):
    with open(image_path, 'rb') as image_file:
        encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
    return encoded_image

# Output file path for the second report
output_html_file_2 = r'reports\report_2.html'
fake_net_log_file_2 = r'reports\fakenet_logs.txt'
# Input malicious details for the second report
input_malicious_details_2 = r'reports\malicious_file_details.csv'
json_data_file = r'reports\virustotal_results.txt' 

def group_and_summarize_repetitive_rows(events):
    grouped_events = {}
    for event in events:
        key = (event[1], event[2], event[4], event[5])
        if key not in grouped_events:
            grouped_events[key] = []
        grouped_events[key].append(event[0])

    summarized_events = []
    for key, time_list in grouped_events.items():
        summarized_events.append((time_list[0], key[0], key[1], key[2], key[3], len(time_list)))

    return summarized_events

# Check if the virustotal_results.txt file exists
virustotal_results_exist = os.path.isfile(json_data_file)

# Load JSON data if it exists
if virustotal_results_exist:
    with open(json_data_file, 'r') as json_file:
        json_data = json.load(json_file)
# Read the contents of the malicious_file_details.csv
with open(input_malicious_details_2, "r", newline="", encoding="utf-8") as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        malicious_file_details = row

sample_name_2 = malicious_file_details['Sample Name']

# Specify the input file and chosen process name for the second report
csv_to_edit_2 = r'.\reports\monitor_report.csv'
input_csv_file_2 = r'.\reports\monitor_report_edited.csv'


# Call the process_csv function for the second report
process_csv(csv_to_edit_2, sample_name_2)

# Define the categories and their respective event types
categories = {
    'Processes Created': ['Process Create', 'Process Start'],
    'Files Created': ['ReadFile', 'WriteFile', 'QueryInformationFile', 'SetInformationFile', 'SetDispositionInformationFile', 'SetRenameInformationFile', 'CreateFile', 'DeleteFile', 'Rename', 'OpenFile', 'CloseFile', 'FlushBuffersFile'],
    'Registry Operations': ['RegCreateKey', 'RegOpenKey', 'RegQueryKey', 'RegSetValue', 'RegDeleteKey', 'RegDeleteValue'],
    'DLL/Executable Loaded': ['Load Image'],
}

# Initialize the HTML output
output_html_2 = """
<!DOCTYPE html>
<html>
<head>
    <style>
    /* Reset default margin and padding */
.report-container {
    padding: 20px;
}

body {
    font-family: 'Rem', sans-serif;
    margin: 0;
    padding: 0;
}

/* Header style */
.header {
    background-color: #2C3E50;
    color: white;
    text-align: center;
    padding: 0.5rem 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}


/*Navigation
nav ul {
    list-style: none;
    display: flex;
    justify-content: center;
    background-color: #2C3E50;
    margin: 0;
    padding: 0;
}

nav ul li {
    margin: 0;
}

nav ul li a {
    display: block;
    padding: 1rem 1.5rem;
    text-align: center;
    color: white;
    text-decoration: none;
    transition: background-color 0.3s, border-radius 0.3s;
    border-radius: 8px;
}


nav ul li a:hover {
    background-color: #34495E;
    border-radius: 15px;
}
*/

.logo {
    width: 300px;
    height: auto;
    margin-right: 20px;
}

.top-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding: 5px 10px;
    height: 150px;
}

.top-left {
    display: flex;
    align-items: center;
}

.top-nav {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    align-items: center;
}

.top-nav li {
    margin-right: 20px;
}

.top-nav a {
    color: white;
    text-decoration: none;
    font-weight: bold;
    font-size: 16px;
}

.top-nav-right {
    margin-left: auto;
    /* Push the top navigation to the right */
}

.top-nav ul,
.bottom-nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    align-items: center;
}

.top-nav li,
.bottom-nav li {
    margin-right: 20px;
}

.top-nav a,
.bottom-nav a {
    color: white;
    text-decoration: none;
    font-weight: bold;
    font-size: 16px;
}

.top-nav {
    justify-content: flex-end;
}

.bottom-nav {
    background-color: #1E2B38;
    padding: 20px;
    width: 100%;
    text-align: center;
    display: flex;
    justify-content: center;
}

.bottom-nav a {
    color: white;
    text-decoration: none;
    font-weight: bold;
    font-size: 16px;
    margin: 0 20px;
    /* Add margin to separate menu items */
}

.bottom-nav a:hover {
    background-color: #34495E;
    border-radius: 15px;
}


.report-container {
    padding: 20px;
}

/* Summary section style */
.summary {
    background-color: #34495E;
    color: white;
    border-radius: 10px;
    padding: 1rem;
    margin: 1rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* Individual section style */
.section {
    background-color: #ECF0F1;
    border-radius: 10px;
    margin: 1rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

/* Section title style */
.section-title {
    background-color: #34495E;
    color: white;
    padding: 0.75rem;
    border-radius: 10px 10px 0 0;
    cursor: pointer;
}

/* Section content style */
.section-content {
    padding: 1rem;
    display: none;
}

/* Network content style */
.network-content {
    white-space: pre-wrap;
    padding: 1rem;
}

/* Collapsible button style */
.collapsible {
    width: 100%;
    background-color: #444;
    color: white;
    border: none;
    padding: 1rem;
    text-align: left;
    cursor: pointer;
    font-size: 1rem;
    border-radius: 10px;
    outline: none;
    transition: background-color 0.3s;
}

/* Active collapsible button style */
.collapsible.active {
    background-color: #333;
}

/* Expandable content style */
.content {
    padding: 1rem;
    display: none;
    background-color: #f4f4f4;
    border-radius: 0 0 10px 10px;
}

/* Table style */
table {
    border-collapse: collapse;
    width: 100%;
    margin-bottom: 1rem;
    border-radius: 10px;
}

/* Table header and cell style */
th,
td {
    padding: 0.5rem;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

/* Table header style */
th {
    background-color: #333;
    color: white;
}

/* Hover effect for table rows */
tr:hover {
    background-color: #f2f2f2;
}

/* Footer */
footer {
    background-color: #2C3E50;
    color: white;
    text-align: center;
    padding: 1rem;
    margin-top: 20px;
}
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Rem&display=swap" rel="stylesheet">

</head>

<body>
<header class="header">
    <div class="top-bar">
        <div class="top-left">
            <img src="malware.svg" alt="Logo" class="logo" >
        </div>
            <nav class="top-nav top-nav-right">
                <ul>
                    <li><a href="#contact">Contact Us</a></li>
                    <li><a id="print-button">Print Report</a></li>
                    <li><a href="#sample-report">Sample Report</a></li>
                </ul>
            </nav>
    </div>
</header>
    <nav class="bottom-nav">
        <ul>
            <li><a href="#sample-files">Sample Files</a></li>
            <li><a href="#threat-rating">Threat Rating</a></li>
            <li><a href="#process-events">Process Events</a></li>
            <li><a href="#system-events">System/File Events</a></li>
            <li><a href="#registry-events">Registry Events</a></li>
            <li><a href="#dll-events">DLL/Executable Loaded Events</a></li>
            <li><a href="#network-events">Network Events</a></li>
        </ul>
    </nav>
<div class="report-container">
"""
# Add main report header
output_html_2 += '<h1>MalwareInsight Report</h1>'
output_html_2 += '<p>This report provides an analysis of the recorded events and demonstrates the following:</p>'
output_html_2 += '<ul>'
output_html_2 += '<li>Sample Data Info</li>'
output_html_2 += '<li>Process Events</li>'
output_html_2 += '<li>System/File Events</li>'
output_html_2 += '<li>Registry Events</li>'
output_html_2 += '<li>DLL/Executable Loaded Events</li>'
output_html_2 += '<li>Network Events</li>'
output_html_2 += '</ul>'

# Generate the "Sample File details" section in HTML format
output_html_2 += "<h2>Sample File details</h2>"
output_html_2 += '<button class="collapsible">Expand/Collapse</button>'
output_html_2 += '<div class="content" style="display: none;">'  # Create a div container for the expandable content
output_html_2 += "<table>"
for key, value in malicious_file_details.items():
    output_html_2 += f"<tr><td>{key}</td><td>{value}</td></tr>"
output_html_2 += "</table>"
output_html_2 += '</div>'  # Close the div container for the expandable content

# Generate the "AV Rating details" section in HTML format if virustotal_results.txt exists
if virustotal_results_exist:
    output_html_2 += "<h2>Threat Rating</h2>"
    output_html_2 += '<button class="collapsible">Expand/Collapse</button>'
    output_html_2 += '<div class="content" style="display: none;">'  # Create a div container for the expandable content

    # Extract necessary data
    stats = json_data["data"]["attributes"]["stats"]
    av_ratings = json_data["data"]["attributes"]["results"]

    # Calculate the total by summing up available categories
    total = sum(stats.values())

    # Calculate the percentage of maliciousness
    if "malicious" in stats:
        malicious_percent = (stats["malicious"] / total) * 100
    else:
        malicious_percent = 0
    
    # Determine the classification based on the malicious percentage
    classification = ""
    if malicious_percent < 10:
        classification = "Harmless"
    elif malicious_percent < 25:
        classification = "Not Malicious"
    elif malicious_percent < 50:
        classification = "Suspicious"
    else:
        classification = "Malicious"
    
    classification_arg = str(classification)

    # Build the HTML content
    output_html_2 += f"<h2>File Analysis Report</h2>"
    try:
        subprocess.run(["python", "threat_graph.py", classification_arg])
    except subprocess.CalledProcessError as e:
        print("Error running threat_graph.py:", e)

    # Add the generated malicious graph image to the "Threat Rating" section
    malicious_graph_image_path = r'reports\malicious_graph.png'
    encoded_malicious_graph = encode_image_to_base64(malicious_graph_image_path)
    output_html_2 += '<div style="text-align: center;">'  # Center the image
    output_html_2 += f'<img src="data:image/png;base64,{encoded_malicious_graph}" alt="Malicious Graph">'
    output_html_2 += '</div>'
    output_html_2 += f'<div style="float: left;">'
    output_html_2 += f"<p><strong>Classification:</strong> {classification}</p>\n"
    output_html_2 += f"<p><strong>Malicious Percentage:</strong> {malicious_percent:.2f}%</p>\n"
    output_html_2 += f'</div>'
    # Add pie chart to the HTML content
    av_stat_pie_chart_path = r'reports\AVStat_PieChart.png'
    encoded_av_stat_pie_chart = encode_image_to_base64(av_stat_pie_chart_path)
    output_html_2 += '<div style="text-align: center;">'  # Center the image
    output_html_2 += f'<img src="data:image/png;base64,{encoded_av_stat_pie_chart}" alt="Protocol Distribution graph">'
    output_html_2 += '</div>'
    output_html_2 += '<table class="event-table" style="clear: both;">'
    output_html_2 += "<tr>\n<th>Antivirus</th>\n<th>Category</th>\n<th>Result</th>\n</tr>\n"

    # Add AV ratings to the HTML table
   

    # Close the HTML content
    output_html_2 += "</table>"
    output_html_2 += '</div>'  # Close the div container for the expandable content

# Generate the HTML output for each category
for category, event_types in categories.items():
    output_html_2 += f'<h2>{category}</h2>'
    output_html_2 += '<button class="collapsible">Expand/Collapse</button>'
    output_html_2 += f'<div class="content" style="display: none;">'  # Create a div container for the expandable content

    # Read the CSV report
    with open(input_csv_file_2, 'r', newline='', encoding='utf-8') as input_file:
        input_reader = csv.reader(input_file)
        header_row = next(input_reader)  # Skip the header row

        # Extract and display the events for the current category
        events = []
        for row in input_reader:
            time = row[0]  # Assuming the time is in the first column
            process_name = row[1]  # Assuming the process name is in the second column
            pid = row[2]  # Assuming the PID is in the third column
            parent_pid = row[8]  # Assuming the Parent PID is in the ninth column
            operation = row[3]  # Assuming the operation is in the fourth column
            path = row[4]  # Assuming the path is in the fifth column
            if any(event_type in operation for event_type in event_types):
                events.append((time, process_name, pid, parent_pid, operation, path))
                
        if category == 'Processes Created':
            unique_process_names = set([event[1] for event in events])  # Get unique process names
            output_html_2 += '<h3>Unique Processes</h3>'
            output_html_2 += '<table>'
            output_html_2 += '<tr><th>Process Name</th><th>Count</th></tr>'
            for process_name in unique_process_names:
                count = sum(1 for event in events if event[1] == process_name)
                output_html_2 += f'<tr><td>{process_name}</td><td>{count}</td></tr>'
            output_html_2 += '</table>'
        # Display event count summary
        event_count = {event_type: 0 for event_type in event_types}
        for event in events:
            event_count[event[4]] += 1

        # Create a table for event count summary
        output_html_2 += f'<h3>Event Count Summary</h3>'
        output_html_2 += '<table>'
        output_html_2 += '<tr><th>Operation</th><th>Count</th></tr>'
        for event_type, count in event_count.items():
            output_html_2 += f'<tr><td>{event_type}</td><td>{count}</td></tr>'
        output_html_2 += '</table>'

        summarized_events = group_and_summarize_repetitive_rows(events)

        # Create a table for detailed event logs with scrollable container
        output_html_2 += '<div class="scrollable-table-container">'
        output_html_2 += '<table class="event-table">'
        for event in summarized_events:
          output_html_2 += '</table>'
        output_html_2 += '</div>'  # Close the scrollable-table-container

        output_html_2 += '</div>'

# Read and process Fakenet logs
with open(fake_net_log_file_2, 'r') as f:
    fakenet_logs = f.readlines()

# Filter out unwanted lines
filtered_logs = [line for line in fakenet_logs if "ICMP type 3 code 1" not in line and "FakeNet" not in line and "WARNING" not in line and "ICMP type 3 code 3" not in line and "ERROR" not in line and "Error" not in line and "Failed" not in line]

# Add Fakenet logs to the "Network Events" section
output_html_2 += f'<h2>Network Events</h2>'
output_html_2 += '<button class="collapsible">Expand/Collapse</button>'
output_html_2 += f'<div class="content" style="display: none;">'
# Add the image to the right under the "Network Events" section

unique_hosts = {}

f
# Keywords to identify different types of requests
request_keywords = ['requested', 'Received A request for domain']

# Iterate through filtered_logs to extract IP/Domain information and update the dictionary
for line in filtered_logs:
    parts = line.split('[')
    protocol = parts[1].split(']')[0].strip()
    
    # Check if any of the request keywords are present in the line
    is_request = any(keyword in line for keyword in request_keywords)
    
    if is_request:
        # Extract the IP and port information if available
        if "UDP " in line:
            udp_part = line.split("UDP ")[1]
            if ":" in udp_part:
                ip = udp_part.split(":")[0]
                port = udp_part.split(":")[1].split()[0]
                unique_ip_port = f"{ip}:{port}"
                if unique_ip_port not in unique_hosts:
                    unique_hosts[unique_ip_port] = 0
                unique_hosts[unique_ip_port] += 1

        # Extract the domain information if available
        if "domain '" in line:
            domain = line.split("domain '")[1].split("'")[0]
            if domain not in unique_hosts:
                unique_hosts[domain] = 0
            unique_hosts[domain] += 1

# Generate a new table in the HTML output to display unique hosts/domains and their counts
# Add a table for the unique hosts/domains
output_html_2 += f'<div class="unique-hosts-table-container" style="float: left;">'
output_html_2 += '<h2>Unique Hosts/Domains</h2>'
output_html_2 += '<table class="unique-hosts-table">'
output_html_2 += '<tr><th>IP/Domain</th><th>Count</th></tr>'
for host, count in unique_hosts.items():
    output_html_2 += f'<tr><td>{host}</td><td>{count}</td></tr>'
output_html_2 += '</table>'
output_html_2 += '</div>'

image_path = r'reports\ProtocolPieChart.png'
encoded_protocol_pie_chart = encode_image_to_base64(image_path)
output_html_2 += f'<div style="float: right;">'
output_html_2 += '<h2>Distribution of protocols used during recording of network activity</h3>'
output_html_2 += f'<img src="data:image/png;base64,{encoded_protocol_pie_chart}" alt="Protocol Distribution graph">'
output_html_2 += '</div>'

# Create a table for the event logs
output_html_2 += '<table class="event-table" style="clear: both;">'
output_html_2 += '</table>'
output_html_2 += '</div>'

# Add JavaScript for expand/collapse functionality
output_html_2 += """
<script>
    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            } else {
                content.style.display = "block";
            }
        });
    }
    
document.addEventListener('DOMContentLoaded', function() {
    var printButton = document.getElementById('print-button');
    printButton.addEventListener('click', function() {
        window.print();
    });
})
</script>
"""

# Footer and Close the HTML tags 
output_html_2 += '</div>'
output_html_2 += '<footer class="footer"> <p>&copy; 2023 MalwareInsight. All rights reserved.</p></footer>'
output_html_2 += '</body></html>'

# Write the HTML output to a file
with open(output_html_file_2, 'w', encoding='utf-8') as output_file:
    output_file.write(output_html_2)

print("HTML report generated successfully.")

