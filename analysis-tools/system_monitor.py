import subprocess
import time
import os
from procmon_parser import load_configuration, dump_configuration, Rule


procmon_path = r'.\ProcessMonitor\procmon.exe'
output_file = r'.\output_file_events.PML'
report_file = r'.\monitor_report.csv'
original_filter_file = r'.\ProcmonConfiguration.pmc'


def modify_filter_file(original_file, process_name):
    modified_file = original_file.replace('.pmc', '_file_events.pmc')

    # Load the original PMC file
    with open(original_file, 'rb') as f:
        config = load_configuration(f.read())

    # Clear existing filter rules
    config['FilterRules'] = []

    # Add include rules for file system operations
    file_system_operations = [
        'ReadFile',
        'WriteFile',
        'QueryInformationFile',
        'SetInformationFile',
        'CreateFile',
        'DeleteFile',
        'Rename',
        'OpenFile',
        'CloseFile',
        'FlushBuffersFile',
        'DirectoryEnumeration'
    ]

    for operation in file_system_operations:
        rule = Rule('Operation', 'is', operation, 'include')
        config['FilterRules'].append(rule)

    # Add include rule for registry operations
    registry_rule = Rule('Operation', 'contains', 'Reg', 'include')
    config['FilterRules'].append(registry_rule)

    # Add process name filter rule
    config['FilterRules'].append(Rule('Process_Name', 'is', process_name))

    # Dump the modified configuration to the new PMC file
    with open(modified_file, 'wb') as f:
        dump_configuration(config, f)

    print("Filter file modified successfully.")

    return modified_file  # Return the modified filter file path


# Ask the user for the process name
process_name = input("Enter the name of the malware process to monitor: ")

# Create the modified filter file
modified_filter_file = modify_filter_file(original_filter_file, process_name)

# Start Process Monitor with the modified PMC file and backing file
subprocess.Popen([procmon_path, '/AcceptEula', '/Minimized', '/LoadConfig', modified_filter_file, '/Backingfile', output_file])

# Terminate Process Monitor
# Wait for the user to enter 'Q' or 'q' to finish monitoring
while True:
    user_input = input("Press 'Q' to finish monitoring: ").lower()
    if user_input == 'q':
        break
    time.sleep(1)

# Terminate Process Monitor
subprocess.Popen([procmon_path, '/Terminate'])
print("Terminating file event monitoring for report generation. Allow for 15 seconds.")
time.sleep(15)

# Generate report using Procmon's built-in functionality with the filter applied
subprocess.Popen([procmon_path, '/OpenLog', output_file, '/SaveAs', report_file, '/SaveApplyFilter', '/Quiet'])

print("Report generated successfully.")

# Delete the modified configuration file
if os.path.exists(modified_filter_file):
    os.remove(modified_filter_file)
    print("Modified configuration file deleted.")
