"""
    Group 40 - Malware Sandbox
        Swinburne University of Technology
        Name: MalwareInsight Report Generation script
        Author: Daniel Pesavento
        Date: 3/07/2023

        
        Description:
        This script generates 2 HTML reports based on the received compressed log files after usage of the MalwareInsight Analysis script. 
        The generated report provides an analysis of recorded events and focuses on specific event categories. 
        Here is a breakdown of the script's functionality:
        1. The script defines categories and their respective event types. 
            - These are based on system event operations such as FileCreate, FileDelete, Load Image etc
        2. It initializes the HTML output and adds a main report header with a summary of the analyzed event categories.
        3. For each category, it reads the monitor report file and extracts events matching the event types for that category.
            - It displays a count summary and a table of operation counts for the events in that category.
            - It displays the event logs in a formatted table.
            - It adds the fakenet.exe logs to the "Network Events" section.
            - It adds JavaScript functionality for expand/collapse buttons to show/hide the content.

        Overall, this script processes the monitor report and FakeNet logs, generates an organized and interactive HTML report, and saves it to a specified file. 
        The report provides insights into different event categories and their associated details for analysis and review.
"""
import csv
import shutil

input_csv_file = r'.\monitor_report.csv'
output_html_file = r'.\report.html'
fake_net_log_file = r'.\fakenet_logs.txt'

# Define the categories and their respective event types
categories = {
    'Processes Created': ['Process Create', 'Process Start'],
    'Files Created': ['ReadFile', 'WriteFile', 'QueryInformationFile', 'SetInformationFile', 'SetDispositionInformationFile', 'SetRenameInformationFile', 'CreateFile', 'DeleteFile', 'Rename', 'OpenFile', 'CloseFile', 'FlushBuffersFile'],
    'Registry Operations': ['RegCreateKey', 'RegOpenKey', 'RegQueryKey', 'RegSetValue', 'RegDeleteKey', 'RegDeleteValue'],
    'DLL/Executable Loaded': ['Load Image'],
}

# Initialize the HTML output
output_html = '<html><body>'

# Add main report header
output_html += '<h1>MalwareInsight Report</h1>'
output_html += '<p>This report provides an analysis of the recorded events and demonstrates the following:</p>'
output_html += '<ul>'
output_html += '<li>Processes Created</li>'
output_html += '<li>Files Created</li>'
output_html += '<li>Registry Operations</li>'
output_html += '<li>DLL/Executable Loaded</li>'
output_html += '<li>Network Events</li>'
output_html += '</ul>'

# Generate the HTML output for each category
for category, event_types in categories.items():
    output_html += f'<h2>{category}</h2>'
    output_html += '<button class="collapsible">Expand/Collapse</button>'  # Add expand/collapse button
    output_html += f'<div class="content" style="display: none;">'  # Create a div container for the expandable content

    # Read the CSV report
    with open(input_csv_file, 'r', newline='', encoding='utf-8') as input_file:
        input_reader = csv.reader(input_file)
        header_row = next(input_reader)  # Skip the header row

        # Extract and display the events for the current category
        events = []
        for row in input_reader:
            operation = row[3]  # Assuming the operation is in the fourth column
            if any(event_type in operation for event_type in event_types):
                time = row[0]  # Assuming the time is in the first column
                process_name = row[1]  # Assuming the process name is in the second column
                pid = row[2]  # Assuming the PID is in the third column
                operation = row[3]  # Assuming the operation is in the fourth column
                path = row[4]  # Assuming the path is in the fifth column
                events.append((time, process_name, pid, operation, path))

        # Display event count summary
        event_count = {event_type: 0 for event_type in event_types}
        for event in events:
            event_count[event[3]] += 1

        # Create a table for operation counts
        output_html += '<table>'
        output_html += '<tr><th>Operation</th><th>Count</th></tr>'
        for event_type, count in event_count.items():
            output_html += f'<tr><td>{event_type}</td><td>{count}</td></tr>'
        output_html += '</table>'

        # Display the event logs
        output_html += '<pre>'
        output_html += f'Time            {"Process Name":<25} PID     Operation    Path\n'
        output_html += f'--------------  {"-------------":<25} -----   ----------   ------------------------------\n'
        for event in events:
            output_html += f'{event[0]}  {event[1]:<25} {event[2]:<6} {event[3]:<12} {event[4]}\n'
        output_html += '</pre>'

    output_html += '</div>'

# Add Fakenet logs to the "Network Events" section
with open(fake_net_log_file, 'r') as f:
    fakenet_logs = f.read()

output_html += f'<h2>Network Events</h2>'
output_html += '<button class="collapsible">Expand/Collapse</button>'
output_html += f'<div class="content" style="display: none;">'
output_html += '<pre>'
output_html += f'{fakenet_logs}'
output_html += '</pre>'
output_html += '</div>'

# Add JavaScript for expand/collapse functionality
output_html += """
<style>
    .collapsible {
        background-color: #777;
        color: white;
        cursor: pointer;
        padding: 18px;
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 15px;
    }

    .content {
        padding: 0 18px;
        display: none;
        overflow: hidden;
        background-color: #f1f1f1;
    }
</style>

<script>
    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.display === "block") {
                content.style.display = "none";
            } else {
                content.style.display = "block";
            }
        });
    }
</script>
"""

# Close the HTML tags
output_html += '</body></html>'

# Write the HTML output to a file
with open(output_html_file, 'w', encoding='utf-8') as output_file:
    output_file.write(output_html)

print("HTML report generated successfully.")
