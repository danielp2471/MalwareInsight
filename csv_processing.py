"""
    Group 40 - Malware Sandbox
        Swinburne University of Technology
        Name: MalwareInsight CSV parser
        Author: Daniel Pesavento
        Date: 7/07/2023

        
        Description:
        This script intakes the full procmon.exe log of system events and filters based on the process name.
        It then recursively takes note of the PID of 1. The Process Name, and then any PID where the process name PID (or any other in the pids_to_monitor set)
        and adds the row to a newly created .csv. The edited .csv is then used in report_parser.py. The end result is a 'process tree' where only items related
        to or directly created as a result of the process_name is included in the report.
        Was mostly created because Microsofts Process Monitor didn't seem to have the ability for filters that were dynamic to the extent that sub-processes
        beyond a recorded Parent PID could be found.
        E.g if acrobat.exe launches word.exe, and word.exe launches malware.exe, all those events should be recorded and each processes own activity should be included
        in the output as well using this method.
"""

import csv
import os

def process_csv(input_file, process_name):
    pids_to_monitor = set()
    rows_to_export = []

    with open(input_file, 'r', newline='', encoding='utf-8') as csv_file:  # Specify the encoding as 'utf-8'
        reader = csv.reader(csv_file)
        headers = next(reader)  # Read the header row

        # Find the index of relevant columns
        process_name_index = headers.index('Process Name')
        pid_index = headers.index('PID')
        parent_pid_index = headers.index('Parent PID')
        path_index = headers.index('Path')

        for row in reader:
            current_process_name = row[process_name_index].strip()  # Strip whitespace from the process name
            current_pid = row[pid_index].strip()  # Strip whitespace from the PID
            current_parent_pid = row[parent_pid_index].strip()  # Strip whitespace from the Parent PID
            current_path = row[path_index].strip()  # Strip whitespace from the Path

            if current_process_name == process_name or process_name in current_path:
                pids_to_monitor.add(current_pid)
                rows_to_export.append(row)

            if current_pid in pids_to_monitor or current_parent_pid in pids_to_monitor:
                pids_to_monitor.add(current_pid)
                rows_to_export.append(row)

    output_file = r'reports\monitor_report_edited.csv'

    with open(output_file, 'w', newline='', encoding='utf-8') as csv_output:  # Specify the encoding as 'utf-8'
        writer = csv.writer(csv_output)
        writer.writerow(headers)  # Write the header row

        for row in rows_to_export:
            writer.writerow(row)

    print(f"Exported {len(rows_to_export)} rows to {output_file}.")
